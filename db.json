{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes\\fluid\\source\\img\\avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\img\\default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\img\\fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\img\\loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\img\\police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\css\\gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\css\\highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\css\\highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\css\\main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\xml\\local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source\\_posts\\学习it网站推荐.md","hash":"40cefbf0bdb669b7a27f745a6d5bd9d331f6fc26","modified":1720164833081},{"_id":"source\\about\\index.md","hash":"3577e59d048ecdfa83f9d1b09a14ea50be1d74bf","modified":1719471059998},{"_id":"source\\_posts\\学习it网站推荐\\image_-m-m1AZh7M.png","hash":"06326b2f927af11f2f6b92c74a8c0a927dcd1c77","modified":1719370387878},{"_id":"source\\_posts\\学习it网站推荐\\image_RtiUPlWbme.png","hash":"0facd847ec0640c285287074d407aa7321a6841a","modified":1719370387919},{"_id":"source\\_posts\\学习it网站推荐\\image_bUw4GOE3i3.png","hash":"971882befb7ce49cdc0b9b35141c78f28f1b57a5","modified":1719370387965},{"_id":"source\\_posts\\学习it网站推荐\\image_qBL4LWSs2U.png","hash":"8cb6d4fc5c472da02a61a45a2effc3e70d890f1d","modified":1719370387981},{"_id":"source\\_posts\\学习it网站推荐\\image_tMLd_Cap6a.png","hash":"ef3b3bf0189dd4e5fc0b0e0fcdde2d5d7f38d0b3","modified":1719370387998},{"_id":"source\\_posts\\学习it网站推荐\\image_PEAqPgamQe.png","hash":"251aee9da55d0cf769bc29e54fbf659c06b1051c","modified":1719370387896},{"_id":"source\\_posts\\学习it网站推荐\\image_zZOb0Uu1MN.png","hash":"8872b7055947069ca0a107a046adb3e21e675d33","modified":1719370388013},{"_id":"themes\\fluid\\source\\css\\_pages\\_tag\\tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719284523549},{"_id":"themes\\fluid\\.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1719284522472},{"_id":"themes\\fluid\\.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1719284522486},{"_id":"themes\\fluid\\.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1719284522480},{"_id":"themes\\fluid\\.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1719284522492},{"_id":"themes\\fluid\\LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1719284522497},{"_id":"themes\\fluid\\README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1719368853803},{"_id":"themes\\fluid\\_config.yml","hash":"c77597fecc097d137080a1d0ea2634f5d74e2be3","modified":1719471301477},{"_id":"themes\\fluid\\languages\\de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1719284522603},{"_id":"themes\\fluid\\package.json","hash":"c640b57695b7b6002399711f1a7708b0f6c05b84","modified":1719284522522},{"_id":"themes\\fluid\\languages\\en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1719284522611},{"_id":"themes\\fluid\\languages\\ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1719284522630},{"_id":"themes\\fluid\\languages\\ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1719284522637},{"_id":"themes\\fluid\\languages\\es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1719284522624},{"_id":"themes\\fluid\\languages\\eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1719284522617},{"_id":"themes\\fluid\\languages\\zh-CN.yml","hash":"2253e1bc61694b3bdc5e434ea2660d13d941b50e","modified":1719284522644},{"_id":"themes\\fluid\\languages\\zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1719284522651},{"_id":"themes\\fluid\\layout\\archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1719284522681},{"_id":"themes\\fluid\\layout\\404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1719284522668},{"_id":"themes\\fluid\\layout\\categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1719284522688},{"_id":"themes\\fluid\\languages\\zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1719284522656},{"_id":"themes\\fluid\\layout\\about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1719284522675},{"_id":"themes\\fluid\\layout\\category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1719284522695},{"_id":"themes\\fluid\\layout\\layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1719284522706},{"_id":"themes\\fluid\\layout\\links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1719284522712},{"_id":"themes\\fluid\\layout\\page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1719284522718},{"_id":"themes\\fluid\\layout\\tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1719284522728},{"_id":"themes\\fluid\\layout\\post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1719284522724},{"_id":"themes\\fluid\\layout\\tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1719284522734},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1719284522536},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1719284522544},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1719284522550},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1719284522562},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1719284522569},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1719284522556},{"_id":"themes\\fluid\\.github\\workflows\\cr.yaml","hash":"19a8a00f5ba9607d82265572fe1202b64a8b0822","modified":1719284522577},{"_id":"themes\\fluid\\.github\\workflows\\limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1719284522586},{"_id":"themes\\fluid\\.github\\workflows\\publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1719284522594},{"_id":"themes\\fluid\\layout\\_partials\\archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1719284522742},{"_id":"themes\\fluid\\layout\\_partials\\category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1719284522748},{"_id":"themes\\fluid\\layout\\_partials\\category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1719284522754},{"_id":"themes\\fluid\\layout\\_partials\\comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1719284522761},{"_id":"themes\\fluid\\layout\\_partials\\css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1719284522768},{"_id":"themes\\fluid\\layout\\_partials\\footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1719284522775},{"_id":"themes\\fluid\\layout\\_partials\\head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1719284522782},{"_id":"themes\\fluid\\layout\\_partials\\header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1719284522787},{"_id":"themes\\fluid\\layout\\_partials\\markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1719284522793},{"_id":"themes\\fluid\\layout\\_partials\\paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1719284522799},{"_id":"themes\\fluid\\layout\\_partials\\scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1719284522804},{"_id":"themes\\fluid\\layout\\_partials\\search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1719284522810},{"_id":"themes\\fluid\\layout\\index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1719284522700},{"_id":"themes\\fluid\\scripts\\events\\index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1719284523000},{"_id":"themes\\fluid\\scripts\\filters\\locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1719284523055},{"_id":"themes\\fluid\\scripts\\filters\\default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1719284523050},{"_id":"themes\\fluid\\scripts\\generators\\index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1719284523068},{"_id":"themes\\fluid\\scripts\\generators\\pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1719284523079},{"_id":"themes\\fluid\\scripts\\filters\\post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1719284523061},{"_id":"themes\\fluid\\scripts\\generators\\local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1719284523075},{"_id":"themes\\fluid\\scripts\\helpers\\engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1719284523093},{"_id":"themes\\fluid\\scripts\\helpers\\date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1719284523087},{"_id":"themes\\fluid\\scripts\\helpers\\export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1719284523099},{"_id":"themes\\fluid\\scripts\\helpers\\injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1719284523111},{"_id":"themes\\fluid\\scripts\\helpers\\import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1719284523105},{"_id":"themes\\fluid\\scripts\\helpers\\page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1719284523116},{"_id":"themes\\fluid\\scripts\\helpers\\scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1719284523123},{"_id":"themes\\fluid\\scripts\\helpers\\url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1719284523128},{"_id":"themes\\fluid\\scripts\\helpers\\wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1719284523141},{"_id":"themes\\fluid\\scripts\\tags\\button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1719284523149},{"_id":"themes\\fluid\\scripts\\tags\\checkbox.js","hash":"0857aa86db2a711ae5c77218a9e3fa686d0e87b1","modified":1719284523156},{"_id":"themes\\fluid\\scripts\\tags\\fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1719284523162},{"_id":"themes\\fluid\\scripts\\helpers\\utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1719284523134},{"_id":"themes\\fluid\\scripts\\tags\\group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1719284523168},{"_id":"themes\\fluid\\scripts\\tags\\label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1719284523174},{"_id":"themes\\fluid\\scripts\\tags\\mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1719284523180},{"_id":"themes\\fluid\\scripts\\utils\\compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1719284523197},{"_id":"themes\\fluid\\scripts\\utils\\crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1719284523203},{"_id":"themes\\fluid\\scripts\\tags\\note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1719284523188},{"_id":"themes\\fluid\\scripts\\utils\\object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1719284523210},{"_id":"themes\\fluid\\scripts\\utils\\resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1719284523215},{"_id":"themes\\fluid\\scripts\\utils\\url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1719284523222},{"_id":"themes\\fluid\\source\\img\\fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1719284523612},{"_id":"themes\\fluid\\source\\img\\avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1719284523588},{"_id":"themes\\fluid\\source\\img\\loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1719284523621},{"_id":"themes\\fluid\\source\\js\\boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1719284523646},{"_id":"themes\\fluid\\source\\img\\police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1719284523635},{"_id":"themes\\fluid\\source\\js\\events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1719284523663},{"_id":"themes\\fluid\\source\\js\\img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1719284523671},{"_id":"themes\\fluid\\source\\js\\color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1719284523654},{"_id":"themes\\fluid\\source\\js\\leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1719284523678},{"_id":"themes\\fluid\\source\\js\\local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1719284523685},{"_id":"themes\\fluid\\source\\js\\plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1719284523693},{"_id":"themes\\fluid\\source\\css\\gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1719284523237},{"_id":"themes\\fluid\\source\\css\\highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1719284523242},{"_id":"themes\\fluid\\source\\css\\highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1719284523247},{"_id":"themes\\fluid\\source\\css\\main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1719284523252},{"_id":"themes\\fluid\\source\\js\\utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1719284523701},{"_id":"themes\\fluid\\source\\xml\\local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1719284523730},{"_id":"themes\\fluid\\layout\\_partials\\comments\\changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1719284522818},{"_id":"themes\\fluid\\layout\\_partials\\comments\\cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1719284522824},{"_id":"themes\\fluid\\layout\\_partials\\comments\\discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1719284522830},{"_id":"themes\\fluid\\layout\\_partials\\comments\\disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1719284522835},{"_id":"themes\\fluid\\layout\\_partials\\comments\\giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1719284522842},{"_id":"themes\\fluid\\layout\\_partials\\comments\\livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1719284522852},{"_id":"themes\\fluid\\layout\\_partials\\comments\\gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1719284522847},{"_id":"themes\\fluid\\layout\\_partials\\comments\\remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1719284522858},{"_id":"themes\\fluid\\layout\\_partials\\comments\\utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1719284522868},{"_id":"themes\\fluid\\layout\\_partials\\comments\\valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1719284522875},{"_id":"themes\\fluid\\layout\\_partials\\comments\\twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1719284522863},{"_id":"themes\\fluid\\layout\\_partials\\comments\\waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1719284522880},{"_id":"themes\\fluid\\layout\\_partials\\footer\\statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1719284522893},{"_id":"themes\\fluid\\layout\\_partials\\footer\\beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1719284522889},{"_id":"themes\\fluid\\layout\\_partials\\header\\banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1719284522900},{"_id":"themes\\fluid\\layout\\_partials\\header\\navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1719284522905},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1719284522912},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1719284522916},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1719284522921},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1719284522925},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1719284522929},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1719284522934},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1719284522939},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1719284522943},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1719284522947},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1719284522952},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1719284522956},{"_id":"themes\\fluid\\layout\\_partials\\post\\category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1719284522962},{"_id":"themes\\fluid\\layout\\_partials\\post\\copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1719284522967},{"_id":"themes\\fluid\\layout\\_partials\\post\\meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1719284522971},{"_id":"themes\\fluid\\layout\\_partials\\post\\meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1719284522975},{"_id":"themes\\fluid\\layout\\_partials\\post\\sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1719284522980},{"_id":"themes\\fluid\\layout\\_partials\\post\\sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1719284522984},{"_id":"themes\\fluid\\scripts\\events\\lib\\compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1719284523009},{"_id":"themes\\fluid\\scripts\\events\\lib\\footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1719284523015},{"_id":"themes\\fluid\\layout\\_partials\\post\\toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1719284522989},{"_id":"themes\\fluid\\scripts\\events\\lib\\injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1719284523031},{"_id":"themes\\fluid\\scripts\\events\\lib\\highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1719284523025},{"_id":"themes\\fluid\\scripts\\events\\lib\\hello.js","hash":"0874d09075432900d711d146e245a500a578498a","modified":1719372022330},{"_id":"themes\\fluid\\scripts\\events\\lib\\merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1719284523040},{"_id":"themes\\fluid\\source\\css\\_functions\\base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1719284523260},{"_id":"themes\\fluid\\scripts\\events\\lib\\lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1719284523036},{"_id":"themes\\fluid\\source\\css\\_pages\\pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1719284523278},{"_id":"themes\\fluid\\source\\css\\_mixins\\base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1719284523270},{"_id":"themes\\fluid\\source\\css\\_variables\\base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1719284523567},{"_id":"themes\\fluid\\source\\css\\_pages\\_about\\about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1719284523286},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1719284523304},{"_id":"themes\\fluid\\source\\css\\_pages\\_archive\\archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1719284523295},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1719284523310},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1719284523316},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1719284523323},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1719284523328},{"_id":"themes\\fluid\\source\\css\\_pages\\_category\\category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1719284523484},{"_id":"themes\\fluid\\source\\css\\_pages\\_category\\category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1719284523471},{"_id":"themes\\fluid\\source\\css\\_pages\\_index\\index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1719284523496},{"_id":"themes\\fluid\\source\\css\\_pages\\_category\\category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1719284523479},{"_id":"themes\\fluid\\source\\css\\_pages\\_links\\links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1719284523509},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1719284523519},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1719284523524},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1719284523530},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\post-page.styl","hash":"cd432a6411ccac7df47e6a300fb1a872cfc763e7","modified":1719284523535},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1719284523540},{"_id":"themes\\fluid\\source\\css\\_pages\\_tag\\tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1719284523554},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1719284523339},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1719284523345},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1719284523365},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1719284523371},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1719284523384},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1719284523376},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1719284523359},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1719284523390},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1719284523397},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1719284523413},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1719284523405},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1719284523421},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1719284523430},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1719284523453},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1719284523441},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1719284523352},{"_id":"source\\_posts\\学习it网站推荐\\image_SOZXE0ImbY.png","hash":"e72edf2eb3099761c51818c99464bbf5d2812395","modified":1719370387945},{"_id":"themes\\fluid\\source\\img\\default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1719284523602},{"_id":"public/local-search.xml","hash":"be0e1ea4585dd139ee5b6c885a76ca688ec4c57e","modified":1722861534227},{"_id":"public/about/index.html","hash":"c04b18d71803d7e9bce5bf85a72773d0ffa6d890","modified":1721722788036},{"_id":"public/archives/index.html","hash":"4a812dbcb22d73b661488439ec7faf31e29b6794","modified":1722861534227},{"_id":"public/archives/2024/index.html","hash":"37df8637d158fd127886a0f285b89e60e2ec3f4b","modified":1722861534227},{"_id":"public/archives/2024/06/index.html","hash":"a4c15f0e6933f19f9c2bc1048b54a1979152ca15","modified":1722861534227},{"_id":"public/index.html","hash":"a522e2b07339737896fbd27a36dc62eefdc6f201","modified":1722861534227},{"_id":"public/404.html","hash":"1fb6f2c76bae1a0c94d7f939f7d0f6c5b2968712","modified":1721722788036},{"_id":"public/tags/index.html","hash":"ad17dd6221622a188110a49febfbf3dea8dd6ff3","modified":1721722788036},{"_id":"public/categories/index.html","hash":"5bbb00615f2876d7c0805a14b82a6951bf25834e","modified":1721722788036},{"_id":"public/links/index.html","hash":"a5483b8dffa6cc442d156c9ec31150fbf4abd3a3","modified":1721722788036},{"_id":"public/2024/06/26/学习it网站推荐/index.html","hash":"2fba316bdff335ab8fd2e61e1c141941d5e05d43","modified":1721722788036},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1721722788036},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1721722788036},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1721722788036},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1721722788036},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1721722788036},{"_id":"public/2024/06/26/学习it网站推荐/image_-m-m1AZh7M.png","hash":"06326b2f927af11f2f6b92c74a8c0a927dcd1c77","modified":1721722788036},{"_id":"public/2024/06/26/学习it网站推荐/image_qBL4LWSs2U.png","hash":"8cb6d4fc5c472da02a61a45a2effc3e70d890f1d","modified":1721722788036},{"_id":"public/2024/06/26/学习it网站推荐/image_RtiUPlWbme.png","hash":"0facd847ec0640c285287074d407aa7321a6841a","modified":1721722788036},{"_id":"public/2024/06/26/学习it网站推荐/image_bUw4GOE3i3.png","hash":"971882befb7ce49cdc0b9b35141c78f28f1b57a5","modified":1721722788036},{"_id":"public/2024/06/26/学习it网站推荐/image_tMLd_Cap6a.png","hash":"ef3b3bf0189dd4e5fc0b0e0fcdde2d5d7f38d0b3","modified":1721722788036},{"_id":"public/js/color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1721722788036},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1721722788036},{"_id":"public/js/events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1721722788036},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1721722788036},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1721722788036},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1721722788036},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1721722788036},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1721722788036},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1721722788036},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1721722788036},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1721722788036},{"_id":"public/css/main.css","hash":"7d7590cfe0261084ad357d5f51cb14d13db826d8","modified":1721722788036},{"_id":"public/2024/06/26/学习it网站推荐/image_PEAqPgamQe.png","hash":"251aee9da55d0cf769bc29e54fbf659c06b1051c","modified":1721722788036},{"_id":"public/2024/06/26/学习it网站推荐/image_zZOb0Uu1MN.png","hash":"8872b7055947069ca0a107a046adb3e21e675d33","modified":1721722788036},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1721722788036},{"_id":"public/2024/06/26/学习it网站推荐/image_SOZXE0ImbY.png","hash":"e72edf2eb3099761c51818c99464bbf5d2812395","modified":1721722788036},{"_id":"source\\_posts\\数据表格.md","hash":"a45772a735c30656ae90249cd0978ab28bd190bb","modified":1719474580738},{"_id":"source\\_posts\\image\\微信截图_20240129101052_2kLtUo59B7.png","hash":"7637838f288a19e94ac614433c874a405a9e0d77","modified":1719474580617},{"_id":"source\\_posts\\image\\微信截图_20240129101736_wj9d7GxuWJ.png","hash":"8ba767e1834941e45b62cd1dcaffaa52f78a0244","modified":1719474580640},{"_id":"source\\_posts\\image\\微信截图_20240129102022_TIcRg0cmvC.png","hash":"ba3d55a9db4bfcc496f36afd3d26d0358a2bc325","modified":1719474580662},{"_id":"source\\_posts\\image\\微信截图_20240129102353_Wl0wM09AJY.png","hash":"13b0e1a37be56d64b9dfcd29ea0340d1a3f04c4a","modified":1719474580672},{"_id":"source\\_posts\\image\\微信截图_20240129102405_SKi1XWM4GG.png","hash":"0ff3a322841ba94ac1241e0b28f8fb42c0957716","modified":1719474580683},{"_id":"source\\_posts\\image\\微信截图_20240129102715_FYbzUnLi2c.png","hash":"a06c8229f31cc958525aea7e757762d17a690acc","modified":1719474580709},{"_id":"source\\_posts\\image\\微信截图_20240129103004_YplUmzZTl9.png","hash":"c98d8e6074067bf2cfd247b71f2b27d812725e51","modified":1719474580731},{"_id":"source\\_posts\\image\\微信截图_20240129101726_GDKMD_EWl8.png","hash":"eb83ee9c6490503f644cdb17b0443e1521fb0356","modified":1719474580629},{"_id":"source\\_posts\\image\\微信图片_20240129100731_uIyvOLNxF0.png","hash":"bbe373dbc75767261185be999c7796c85b43ae86","modified":1719474580605},{"_id":"source\\_posts\\image\\微信截图_20240129102006_1fTD1A_zCD.png","hash":"331dfaaead3c0a753d19f6b3bb67306e15c1ee1c","modified":1719474580651},{"_id":"source\\_posts\\image\\微信截图_20240129102644_RqMdZn4FXP.png","hash":"6175b5fa11595ef04e039bc18a3647492de66438","modified":1719474580697},{"_id":"source\\_posts\\image\\微信截图_20240129102954_X_wPMnYpmb.png","hash":"53998dd7ce3e83b052f1face009309e63a4b27fe","modified":1719474580721},{"_id":"public/2024/06/27/数据表格/index.html","hash":"0f3c0987d4267410cc0b362e1e9d7b4f54690e7f","modified":1719474606407},{"_id":"source\\_posts\\application.yml","hash":"41b13625d327832bbcc70648eda95cbc66239327","modified":1719819918791},{"_id":"source\\_posts\\学习it网站推荐\\application.yml","hash":"41b13625d327832bbcc70648eda95cbc66239327","modified":1719819918791},{"_id":"public/2024/06/26/学习it网站推荐/application.yml","hash":"41b13625d327832bbcc70648eda95cbc66239327","modified":1719821932137},{"_id":"source\\_posts\\update\\application.yml","hash":"41b13625d327832bbcc70648eda95cbc66239327","modified":1719819918791},{"_id":"source\\_posts\\学习it网站推荐\\updates.xml","hash":"ea126686492b2a1982e0252d246d31b3eef35fb0","modified":1719827093876},{"_id":"public/2024/06/26/学习it网站推荐/updates.xml","hash":"ea126686492b2a1982e0252d246d31b3eef35fb0","modified":1719827107084},{"_id":"source\\_posts\\学习it网站推荐\\chrome-seal.crx","hash":"bf80aec88f09e96aa30bc44214a46d2d3444e8b7","modified":1719822332771},{"_id":"public/2024/06/26/学习it网站推荐/chrome-seal.crx","hash":"bf80aec88f09e96aa30bc44214a46d2d3444e8b7","modified":1719827107084},{"_id":"source\\_posts\\linux下实现钉钉告警.md","hash":"fcee8f20acc8024dd25260edded42ff7387c7fc6","modified":1721716409150},{"_id":"public/archives/2024/07/index.html","hash":"b09f79b34f70ae46462eea5e7325119a0e33c77a","modified":1722861534227},{"_id":"public/2024/07/23/linux下实现钉钉告警/index.html","hash":"1b3c0de6d698a90f196d3f8b81395834485106d9","modified":1721722788036},{"_id":"source\\_posts\\docker常用指令.md","hash":"04af792a9d11305ad74e9aaad7876a9aa349b1de","modified":1721716795180},{"_id":"public/2024/07/23/docker常用指令/index.html","hash":"17179f9429349799920a5a0f9a9093b2a323f4cb","modified":1721716823232},{"_id":"source\\_posts\\docker修改应用为自动启动.md","hash":"10fa44366e58daa4edcbf1cffd2731bc6fd31a3d","modified":1721722786060},{"_id":"public/2024/07/23/docker修改应用为自动启动/index.html","hash":"2138788e1f8a767723068aa84c9fe33b166ca92a","modified":1721810079849},{"_id":"source\\_posts\\nginx配置上传文件大小.md","hash":"6692830223f4fdf939560f78cf3bbca90acc02a6","modified":1721810073639},{"_id":"public/2024/07/24/nginx配置上传文件大小/index.html","hash":"949114217b68dbfda3b0183dd4495c0b6f4b59d3","modified":1721900213754},{"_id":"source\\_posts\\tcp6-如何-改成tcp4.md","hash":"e887f350b627ad8b2c98240791df1fdc09d61416","modified":1721900207968},{"_id":"public/2024/07/25/tcp6-如何-改成tcp4/index.html","hash":"83303aba48e42553532d943ead270061d8d8da42","modified":1721905819179},{"_id":"source\\_posts\\select-for-update用法的好处.md","hash":"34c5f78853bc2509cf3b137e8e570afa1571c016","modified":1721905814614},{"_id":"public/2024/07/25/select-for-update用法的好处/index.html","hash":"4341c85219b172e307307e231c78f79cb68fd132","modified":1721959445127},{"_id":"source\\_posts\\在linux上使用代理.md","hash":"cb5258d4974f532a2fcd2aea0a0f37bec7171781","modified":1721959987057},{"_id":"source\\_posts\\在linux上使用代理\\mihomo-linux-amd64-v1.18.6.deb","hash":"bc855430f0b8f7b2637a13f6e8d5e75f39070ab1","modified":1721912142425},{"_id":"public/2024/07/26/在linux上使用代理/index.html","hash":"7f9f56c2c45f2a2d26399797e8144635fb170509","modified":1721984525581},{"_id":"public/2024/07/26/在linux上使用代理/mihomo-linux-amd64-v1.18.6.deb","hash":"bc855430f0b8f7b2637a13f6e8d5e75f39070ab1","modified":1721959445127},{"_id":"source\\_posts\\使用切面或拦截器打印异常日志.md","hash":"120eb9b40d00464d069d31c01d29a08b29f7c772","modified":1721984519753},{"_id":"public/2024/07/26/使用切面或拦截器打印异常日志/index.html","hash":"9aee4b8d1c6f989fa1b20c35565f98771de2c0a4","modified":1722305289373},{"_id":"source\\_posts\\解读redis分布式锁核心逻辑.md","hash":"004e4880e4a14bd507f1c37c3716c715ebfa9ed0","modified":1722305281727},{"_id":"public/2024/07/30/解读redis分布式锁核心逻辑/index.html","hash":"ce0a236d16486052844264a680b26f2c2856a966","modified":1722861534227},{"_id":"source\\_posts\\对linux磁盘进行无损扩容.md","hash":"8a5d63fbc4df51f2ba197080762f897733dbc0d8","modified":1722861527777},{"_id":"public/archives/2024/08/index.html","hash":"7e3ab15f9ce700402b3a96aa3d625b2fdbab6de0","modified":1722861534227},{"_id":"public/2024/08/05/对linux磁盘进行无损扩容/index.html","hash":"33c53fd4b924645ee26692247572b8ddeed9e313","modified":1722861534227}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2020-02-23T11:20:33.000Z","layout":"about","_content":"\n一刹牵着你 一瞬飞万里\n一秒心动过 一世不忘记\n\n一息间妳的吻幻化我的发肤\n一息间妳的爱让我找到转机\n\n成就这一躺生命旅程不舍不弃\n成就这一个心愿准我跟着妳\n然后找一个境地跟妳相伴一起\n无惧这一切崩坏黑暗 跨越生死\n\n飞过千万里 天已经渐晚\n衰退的视觉 倒退的时间\n\n看不到 靠感觉亦会捉紧你手\n想不起你的脸 但我心跟着走\n\n延续这一躺生命旅程不舍不弃\n延续这一个心愿准我跟着妳\n然后找一个境地跟妳相伴一起\n无惧这一切崩坏黑暗 让我守着妳\n\n忘掉这一切生命色相都认得妳\n能用心于记忆内搜索 感受妳\n明白我跟妳生命线已相连不死\n能在远方再生没了期又再一～起\n\n今世 因为妳来","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-23 19:20:33\nlayout: about\n---\n\n一刹牵着你 一瞬飞万里\n一秒心动过 一世不忘记\n\n一息间妳的吻幻化我的发肤\n一息间妳的爱让我找到转机\n\n成就这一躺生命旅程不舍不弃\n成就这一个心愿准我跟着妳\n然后找一个境地跟妳相伴一起\n无惧这一切崩坏黑暗 跨越生死\n\n飞过千万里 天已经渐晚\n衰退的视觉 倒退的时间\n\n看不到 靠感觉亦会捉紧你手\n想不起你的脸 但我心跟着走\n\n延续这一躺生命旅程不舍不弃\n延续这一个心愿准我跟着妳\n然后找一个境地跟妳相伴一起\n无惧这一切崩坏黑暗 让我守着妳\n\n忘掉这一切生命色相都认得妳\n能用心于记忆内搜索 感受妳\n明白我跟妳生命线已相连不死\n能在远方再生没了期又再一～起\n\n今世 因为妳来","updated":"2024-06-27T06:50:59.998Z","path":"about/index.html","comments":1,"_id":"clxwwokx600007wjddv2p2ahp","content":"<p>一刹牵着你 一瞬飞万里<br>一秒心动过 一世不忘记</p>\n<p>一息间妳的吻幻化我的发肤<br>一息间妳的爱让我找到转机</p>\n<p>成就这一躺生命旅程不舍不弃<br>成就这一个心愿准我跟着妳<br>然后找一个境地跟妳相伴一起<br>无惧这一切崩坏黑暗 跨越生死</p>\n<p>飞过千万里 天已经渐晚<br>衰退的视觉 倒退的时间</p>\n<p>看不到 靠感觉亦会捉紧你手<br>想不起你的脸 但我心跟着走</p>\n<p>延续这一躺生命旅程不舍不弃<br>延续这一个心愿准我跟着妳<br>然后找一个境地跟妳相伴一起<br>无惧这一切崩坏黑暗 让我守着妳</p>\n<p>忘掉这一切生命色相都认得妳<br>能用心于记忆内搜索 感受妳<br>明白我跟妳生命线已相连不死<br>能在远方再生没了期又再一～起</p>\n<p>今世 因为妳来</p>\n","excerpt":"","more":"<p>一刹牵着你 一瞬飞万里<br>一秒心动过 一世不忘记</p>\n<p>一息间妳的吻幻化我的发肤<br>一息间妳的爱让我找到转机</p>\n<p>成就这一躺生命旅程不舍不弃<br>成就这一个心愿准我跟着妳<br>然后找一个境地跟妳相伴一起<br>无惧这一切崩坏黑暗 跨越生死</p>\n<p>飞过千万里 天已经渐晚<br>衰退的视觉 倒退的时间</p>\n<p>看不到 靠感觉亦会捉紧你手<br>想不起你的脸 但我心跟着走</p>\n<p>延续这一躺生命旅程不舍不弃<br>延续这一个心愿准我跟着妳<br>然后找一个境地跟妳相伴一起<br>无惧这一切崩坏黑暗 让我守着妳</p>\n<p>忘掉这一切生命色相都认得妳<br>能用心于记忆内搜索 感受妳<br>明白我跟妳生命线已相连不死<br>能在远方再生没了期又再一～起</p>\n<p>今世 因为妳来</p>\n"}],"Post":[{"title":"学习it网站推荐","date":"2024-06-26T03:06:14.000Z","_content":"\n分享一些好的网站，个人学习常用的网站，作为分享后续持续更新.\n\n## 网站资源\n\n### 技术学习网站\n\n- 架构师学习 [https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览](https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览 \"https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览\")\n  ![](学习it网站推荐/image_PEAqPgamQe.png)\n- 源码学习：[https://doocs.github.io/source-code-hunter/#/](https://doocs.github.io/source-code-hunter/#/ \"https://doocs.github.io/source-code-hunter/#/\")\n  ![](学习it网站推荐/image_qBL4LWSs2U.png)\n- 互联网 Java 工程师进阶知识完全扫盲:  [https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲](https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲 \"https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲\")\n  ![](学习it网站推荐/image_RtiUPlWbme.png)\n- 叶良辰の学习笔记 [https://yangzhiwen911.github.io/zh/guide/](https://yangzhiwen911.github.io/zh/guide/ \"https://yangzhiwen911.github.io/zh/guide/\")\n  ![](学习it网站推荐/image_tMLd_Cap6a.png)\n- 图灵Java架构师学习路线(点击链接看新版本) [https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map](https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map \"https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map\")\n  ![](学习it网站推荐/image_-m-m1AZh7M.png)\n- [深入架构原理与实践](https://www.thebyte.com.cn/ \"深入架构原理与实践\") [https://www.thebyte.com.cn/](https://www.thebyte.com.cn/ \"https://www.thebyte.com.cn/\");\n  ![](学习it网站推荐/image_zZOb0Uu1MN.png)\n- Kubernetes 实践指南 [https://imroc.cc/kubernetes/](https://imroc.cc/kubernetes/ \"https://imroc.cc/kubernetes/\");\n  vip破解视频  [https://share.xiaole88.com/其他东西/老齐的IT加油站](https://share.xiaole88.com/其他东西/老齐的IT加油站 \"https://share.xiaole88.com/其他东西/老齐的IT加油站\")\n  [https://share.xiaole88.com/K8渗透工具箱](https://share.xiaole88.com/K8渗透工具箱 \"https://share.xiaole88.com/K8渗透工具箱\")\n\n### 工具网站：\n\n- [https://www.flickr.com/](https://www.flickr.com/ \"https://www.flickr.com/\")   好的照片不能我一个人分享\n\n- [https://markmap.js.org/repl](https://markmap.js.org/repl \"https://markmap.js.org/repl\")  将markmap 生成图例\n  ![](学习it网站推荐/image_bUw4GOE3i3.png)\n\n- 苹果id相关：\n  \n  [https://appleid.stryun.top/](https://appleid.stryun.top/ \"https://appleid.stryun.top/\")\n  \n  [https://apple.hutaosubconverter.com/hutao](https://apple.hutaosubconverter.com/hutao \"https://apple.hutaosubconverter.com/hutao\")\n\n### 营销方向学习：\n\n- 宣传图生成 [https://design.palxp.cn/home?tempid=1188](https://design.palxp.cn/home?tempid=1188 \"https://design.palxp.cn/home?tempid=1188\")\n  \n  ![](学习it网站推荐/image_SOZXE0ImbY.png)\n","source":"_posts/学习it网站推荐.md","raw":"---\n\ntitle: 学习it网站推荐\ndate: 2024-06-26 11:06:14\ntags:\n\n---\n\n分享一些好的网站，个人学习常用的网站，作为分享后续持续更新.\n\n## 网站资源\n\n### 技术学习网站\n\n- 架构师学习 [https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览](https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览 \"https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览\")\n  ![](学习it网站推荐/image_PEAqPgamQe.png)\n- 源码学习：[https://doocs.github.io/source-code-hunter/#/](https://doocs.github.io/source-code-hunter/#/ \"https://doocs.github.io/source-code-hunter/#/\")\n  ![](学习it网站推荐/image_qBL4LWSs2U.png)\n- 互联网 Java 工程师进阶知识完全扫盲:  [https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲](https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲 \"https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲\")\n  ![](学习it网站推荐/image_RtiUPlWbme.png)\n- 叶良辰の学习笔记 [https://yangzhiwen911.github.io/zh/guide/](https://yangzhiwen911.github.io/zh/guide/ \"https://yangzhiwen911.github.io/zh/guide/\")\n  ![](学习it网站推荐/image_tMLd_Cap6a.png)\n- 图灵Java架构师学习路线(点击链接看新版本) [https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map](https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map \"https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map\")\n  ![](学习it网站推荐/image_-m-m1AZh7M.png)\n- [深入架构原理与实践](https://www.thebyte.com.cn/ \"深入架构原理与实践\") [https://www.thebyte.com.cn/](https://www.thebyte.com.cn/ \"https://www.thebyte.com.cn/\");\n  ![](学习it网站推荐/image_zZOb0Uu1MN.png)\n- Kubernetes 实践指南 [https://imroc.cc/kubernetes/](https://imroc.cc/kubernetes/ \"https://imroc.cc/kubernetes/\");\n  vip破解视频  [https://share.xiaole88.com/其他东西/老齐的IT加油站](https://share.xiaole88.com/其他东西/老齐的IT加油站 \"https://share.xiaole88.com/其他东西/老齐的IT加油站\")\n  [https://share.xiaole88.com/K8渗透工具箱](https://share.xiaole88.com/K8渗透工具箱 \"https://share.xiaole88.com/K8渗透工具箱\")\n\n### 工具网站：\n\n- [https://www.flickr.com/](https://www.flickr.com/ \"https://www.flickr.com/\")   好的照片不能我一个人分享\n\n- [https://markmap.js.org/repl](https://markmap.js.org/repl \"https://markmap.js.org/repl\")  将markmap 生成图例\n  ![](学习it网站推荐/image_bUw4GOE3i3.png)\n\n- 苹果id相关：\n  \n  [https://appleid.stryun.top/](https://appleid.stryun.top/ \"https://appleid.stryun.top/\")\n  \n  [https://apple.hutaosubconverter.com/hutao](https://apple.hutaosubconverter.com/hutao \"https://apple.hutaosubconverter.com/hutao\")\n\n### 营销方向学习：\n\n- 宣传图生成 [https://design.palxp.cn/home?tempid=1188](https://design.palxp.cn/home?tempid=1188 \"https://design.palxp.cn/home?tempid=1188\")\n  \n  ![](学习it网站推荐/image_SOZXE0ImbY.png)\n","slug":"学习it网站推荐","published":1,"updated":"2024-07-05T07:33:53.081Z","_id":"clxwwokx900017wjd3y3c9xhh","comments":1,"layout":"post","photos":[],"content":"<p>分享一些好的网站，个人学习常用的网站，作为分享后续持续更新.</p>\n<h2 id=\"网站资源\"><a href=\"#网站资源\" class=\"headerlink\" title=\"网站资源\"></a>网站资源</h2><h3 id=\"技术学习网站\"><a href=\"#技术学习网站\" class=\"headerlink\" title=\"技术学习网站\"></a>技术学习网站</h3><ul>\n<li>架构师学习 <a href=\"https://bugstack.cn/md/other/guide-to-reading.html#%E4%B8%80%E3%80%81%E6%9C%AC%E7%AB%99%E7%9F%A5%E8%AF%86%E9%98%85%E8%A7%88\" title=\"https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览\">https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_PEAqPgamQe.png\" class></li>\n<li>源码学习：<a href=\"https://doocs.github.io/source-code-hunter/#/\" title=\"https://doocs.github.io/source-code-hunter/#/\">https://doocs.github.io/source-code-hunter/#/</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_qBL4LWSs2U.png\" class></li>\n<li>互联网 Java 工程师进阶知识完全扫盲:  <a href=\"https://doocs.github.io/advanced-java/#/?id=%E4%BA%92%E8%81%94%E7%BD%91-java-%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AE%8C%E5%85%A8%E6%89%AB%E7%9B%B2\" title=\"https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲\">https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_RtiUPlWbme.png\" class></li>\n<li>叶良辰の学习笔记 <a href=\"https://yangzhiwen911.github.io/zh/guide/\" title=\"https://yangzhiwen911.github.io/zh/guide/\">https://yangzhiwen911.github.io/zh/guide/</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_tMLd_Cap6a.png\" class></li>\n<li>图灵Java架构师学习路线(点击链接看新版本) <a href=\"https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map\" title=\"https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map\">https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_-m-m1AZh7M.png\" class></li>\n<li><a href=\"https://www.thebyte.com.cn/\" title=\"深入架构原理与实践\">深入架构原理与实践</a> <a href=\"https://www.thebyte.com.cn/\" title=\"https://www.thebyte.com.cn/\">https://www.thebyte.com.cn/</a>;<img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_zZOb0Uu1MN.png\" class></li>\n<li>Kubernetes 实践指南 <a href=\"https://imroc.cc/kubernetes/\" title=\"https://imroc.cc/kubernetes/\">https://imroc.cc/kubernetes/</a>;<br>vip破解视频  <a href=\"https://share.xiaole88.com/%E5%85%B6%E4%BB%96%E4%B8%9C%E8%A5%BF/%E8%80%81%E9%BD%90%E7%9A%84IT%E5%8A%A0%E6%B2%B9%E7%AB%99\" title=\"https://share.xiaole88.com/其他东西/老齐的IT加油站\">https://share.xiaole88.com/其他东西/老齐的IT加油站</a><br><a href=\"https://share.xiaole88.com/K8%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E7%AE%B1\" title=\"https://share.xiaole88.com/K8渗透工具箱\">https://share.xiaole88.com/K8渗透工具箱</a></li>\n</ul>\n<h3 id=\"工具网站：\"><a href=\"#工具网站：\" class=\"headerlink\" title=\"工具网站：\"></a>工具网站：</h3><ul>\n<li><p><a href=\"https://www.flickr.com/\" title=\"https://www.flickr.com/\">https://www.flickr.com/</a>   好的照片不能我一个人分享</p>\n</li>\n<li><p><a href=\"https://markmap.js.org/repl\" title=\"https://markmap.js.org/repl\">https://markmap.js.org/repl</a>  将markmap 生成图例</p>\n<img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_bUw4GOE3i3.png\" class>\n</li>\n<li><p>苹果id相关：</p>\n<p><a href=\"https://appleid.stryun.top/\" title=\"https://appleid.stryun.top/\">https://appleid.stryun.top/</a></p>\n<p><a href=\"https://apple.hutaosubconverter.com/hutao\" title=\"https://apple.hutaosubconverter.com/hutao\">https://apple.hutaosubconverter.com/hutao</a></p>\n</li>\n</ul>\n<h3 id=\"营销方向学习：\"><a href=\"#营销方向学习：\" class=\"headerlink\" title=\"营销方向学习：\"></a>营销方向学习：</h3><ul>\n<li><p>宣传图生成 <a href=\"https://design.palxp.cn/home?tempid=1188\" title=\"https://design.palxp.cn/home?tempid=1188\">https://design.palxp.cn/home?tempid=1188</a></p>\n<img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_SOZXE0ImbY.png\" class></li>\n</ul>\n","excerpt":"","more":"<p>分享一些好的网站，个人学习常用的网站，作为分享后续持续更新.</p>\n<h2 id=\"网站资源\"><a href=\"#网站资源\" class=\"headerlink\" title=\"网站资源\"></a>网站资源</h2><h3 id=\"技术学习网站\"><a href=\"#技术学习网站\" class=\"headerlink\" title=\"技术学习网站\"></a>技术学习网站</h3><ul>\n<li>架构师学习 <a href=\"https://bugstack.cn/md/other/guide-to-reading.html#%E4%B8%80%E3%80%81%E6%9C%AC%E7%AB%99%E7%9F%A5%E8%AF%86%E9%98%85%E8%A7%88\" title=\"https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览\">https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_PEAqPgamQe.png\" class></li>\n<li>源码学习：<a href=\"https://doocs.github.io/source-code-hunter/#/\" title=\"https://doocs.github.io/source-code-hunter/#/\">https://doocs.github.io/source-code-hunter/#/</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_qBL4LWSs2U.png\" class></li>\n<li>互联网 Java 工程师进阶知识完全扫盲:  <a href=\"https://doocs.github.io/advanced-java/#/?id=%E4%BA%92%E8%81%94%E7%BD%91-java-%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AE%8C%E5%85%A8%E6%89%AB%E7%9B%B2\" title=\"https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲\">https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_RtiUPlWbme.png\" class></li>\n<li>叶良辰の学习笔记 <a href=\"https://yangzhiwen911.github.io/zh/guide/\" title=\"https://yangzhiwen911.github.io/zh/guide/\">https://yangzhiwen911.github.io/zh/guide/</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_tMLd_Cap6a.png\" class></li>\n<li>图灵Java架构师学习路线(点击链接看新版本) <a href=\"https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map\" title=\"https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map\">https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map</a><img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_-m-m1AZh7M.png\" class></li>\n<li><a href=\"https://www.thebyte.com.cn/\" title=\"深入架构原理与实践\">深入架构原理与实践</a> <a href=\"https://www.thebyte.com.cn/\" title=\"https://www.thebyte.com.cn/\">https://www.thebyte.com.cn/</a>;<img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_zZOb0Uu1MN.png\" class></li>\n<li>Kubernetes 实践指南 <a href=\"https://imroc.cc/kubernetes/\" title=\"https://imroc.cc/kubernetes/\">https://imroc.cc/kubernetes/</a>;<br>vip破解视频  <a href=\"https://share.xiaole88.com/%E5%85%B6%E4%BB%96%E4%B8%9C%E8%A5%BF/%E8%80%81%E9%BD%90%E7%9A%84IT%E5%8A%A0%E6%B2%B9%E7%AB%99\" title=\"https://share.xiaole88.com/其他东西/老齐的IT加油站\">https://share.xiaole88.com/其他东西/老齐的IT加油站</a><br><a href=\"https://share.xiaole88.com/K8%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E7%AE%B1\" title=\"https://share.xiaole88.com/K8渗透工具箱\">https://share.xiaole88.com/K8渗透工具箱</a></li>\n</ul>\n<h3 id=\"工具网站：\"><a href=\"#工具网站：\" class=\"headerlink\" title=\"工具网站：\"></a>工具网站：</h3><ul>\n<li><p><a href=\"https://www.flickr.com/\" title=\"https://www.flickr.com/\">https://www.flickr.com/</a>   好的照片不能我一个人分享</p>\n</li>\n<li><p><a href=\"https://markmap.js.org/repl\" title=\"https://markmap.js.org/repl\">https://markmap.js.org/repl</a>  将markmap 生成图例</p>\n<img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_bUw4GOE3i3.png\" class>\n</li>\n<li><p>苹果id相关：</p>\n<p><a href=\"https://appleid.stryun.top/\" title=\"https://appleid.stryun.top/\">https://appleid.stryun.top/</a></p>\n<p><a href=\"https://apple.hutaosubconverter.com/hutao\" title=\"https://apple.hutaosubconverter.com/hutao\">https://apple.hutaosubconverter.com/hutao</a></p>\n</li>\n</ul>\n<h3 id=\"营销方向学习：\"><a href=\"#营销方向学习：\" class=\"headerlink\" title=\"营销方向学习：\"></a>营销方向学习：</h3><ul>\n<li><p>宣传图生成 <a href=\"https://design.palxp.cn/home?tempid=1188\" title=\"https://design.palxp.cn/home?tempid=1188\">https://design.palxp.cn/home?tempid=1188</a></p>\n<img src=\"/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_SOZXE0ImbY.png\" class></li>\n</ul>\n"},{"title":"linux下实现钉钉告警","date":"2024-07-23T03:45:38.000Z","_content":"\n在Linux系统中，可以使用Shell脚本和定时任务（cron）来监控CPU、内存和硬盘使用情况，当超过指定阈值时发送告警。为了发送钉钉告警，需要用到钉钉的自定义机器人接口。\n需要注意的是，本教程的机器是12核心。因此需要得到12核心的最高cpu使用率后取最大值。\n\n以下是实现此功能的步骤：\n\n1. **创建钉钉机器人并获取Webhook URL：**\n    - 登录钉钉，创建自定义机器人并获取Webhook URL，用于发送告警信息。\n    \n2. **编写Shell脚本：**\n    - 编写一个Shell脚本来检查系统资源的使用情况，并在超过阈值时发送钉钉告警。\n    \n3. **配置定时任务（cron）：**\n    - 将脚本配置为定时任务，定期检查系统资源的使用情况。\n\n### 1. 创建钉钉机器人并获取Webhook URL\n\n在钉钉中创建自定义机器人，记录下Webhook URL，这将在脚本中用于发送告警。\n- 例如：https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5\n\n### 2. 编写Shell脚本\n\n下面是一个示例Shell脚本`monitor.sh`：\n\n```sh\n#!/bin/bash\n\n# 获取cpu使用率\nfunction get_cpu_usage(){\n    echo $(top -bn1 | grep \"Cpu(s)\" | awk '{print 100 - $8}' | awk '{printf \"%.2f\", $1}')\n}\n\n# 获取磁盘使用率\ndata_name=\"/\" \ndiskUsage=$(df -h | grep -w $data_name | awk '{print $5}' | sed 's/%//')\n\n# 获取内存情况\nmem_total=$(free -m | awk 'NR==2 {print $2}')\nmem_used=$(free -m | awk 'NR==2 {print $3}')\n\n# 统计内存使用率\nmem_used_percent=$(echo \"scale=2; ($mem_used / $mem_total) * 100\" | bc)\n\n# 获取报警时间\nnow_time=$(date '+%F %T')\n\nuser=\"18857415467\"\n\n# 主机信息\nDate_time=$(date \"+%Y-%m-%d--%H:%M:%S\")\nIP_addr=$(hostname -I | awk '{print $1}')\n\n# webhook url\nDingding_Url=\"https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5\"\n\nfunction SendDownMessageToDingding(){\n    # 发送钉钉消息\n    curl -s \"${Dingding_Url}\" -H 'Content-Type: application/json' -d \"\n    {\n     'msgtype': 'text',\n     'text': {'content': '资源耗尽警告！\\n巡查时间：${Date_time}\\nIP地址：${IP_addr}\\n资源状况如下:\\n【CPU使用率：${cpuUsage}%】\\n【磁盘使用率：${diskUsage}%】\\n【内存使用率：${mem_used_percent}%】'},\n     'at': {'atMobiles': ['${user}'], 'isAtAll': true}\n      }\"\n}\n\nfunction check(){\n    cpuUsage=$(get_cpu_usage)\n    if (( $(echo \"$cpuUsage > 90\" | bc -l) )); then\n        echo \"检测到CPU使用率高于90%，开始1分钟监控...\"\n        high_cpu_duration=0\n        for ((i=0; i<60; i++)); do\n            sleep 1\n            cpuUsage=$(get_cpu_usage)\n            if (( $(echo \"$cpuUsage > 90\" | bc -l) )); then\n                ((high_cpu_duration++))\n            else\n                high_cpu_duration=0\n            fi\n\n            if (( high_cpu_duration >= 60 )); then\n                echo \"CPU使用率持续高于90%超过1分钟，发送警报...\"\n                SendDownMessageToDingding\n                break\n            fi\n        done\n    fi\n\n    if (( $(echo \"$diskUsage > 80\" | bc -l) )) || (( $(echo \"$mem_used_percent > 80\" | bc -l) )); then\n        SendDownMessageToDingding\n    fi\n}\n\ncheck\n\n```\n\n将`073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5`替换为你从钉钉获取的Webhook URL的token。\n\n### 3. 配置定时任务（cron）\n\n通过cron定期运行这个脚本。首先，编辑cron配置：\n\n```sh\ncrontab -e\n```\n\n然后添加以下内容以每分钟运行一次脚本：\n\n```sh\n* * * * * /path/to/monitor.sh\n```\n\n确保脚本`monitor.sh`有执行权限：\n\n```sh\nchmod +x /path/to/monitor.sh\n```\n\n### 总结\n\n上述脚本和cron配置将监控CPU、内存和硬盘使用情况，并在超过设定的阈值时通过钉钉发送告警消息。你可以根据实际需求调整脚本的执行频率和告警阈值。","source":"_posts/linux下实现钉钉告警.md","raw":"---\ntitle: linux下实现钉钉告警\ndate: 2024-07-23 11:45:38\ntags:\n---\n\n在Linux系统中，可以使用Shell脚本和定时任务（cron）来监控CPU、内存和硬盘使用情况，当超过指定阈值时发送告警。为了发送钉钉告警，需要用到钉钉的自定义机器人接口。\n需要注意的是，本教程的机器是12核心。因此需要得到12核心的最高cpu使用率后取最大值。\n\n以下是实现此功能的步骤：\n\n1. **创建钉钉机器人并获取Webhook URL：**\n    - 登录钉钉，创建自定义机器人并获取Webhook URL，用于发送告警信息。\n    \n2. **编写Shell脚本：**\n    - 编写一个Shell脚本来检查系统资源的使用情况，并在超过阈值时发送钉钉告警。\n    \n3. **配置定时任务（cron）：**\n    - 将脚本配置为定时任务，定期检查系统资源的使用情况。\n\n### 1. 创建钉钉机器人并获取Webhook URL\n\n在钉钉中创建自定义机器人，记录下Webhook URL，这将在脚本中用于发送告警。\n- 例如：https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5\n\n### 2. 编写Shell脚本\n\n下面是一个示例Shell脚本`monitor.sh`：\n\n```sh\n#!/bin/bash\n\n# 获取cpu使用率\nfunction get_cpu_usage(){\n    echo $(top -bn1 | grep \"Cpu(s)\" | awk '{print 100 - $8}' | awk '{printf \"%.2f\", $1}')\n}\n\n# 获取磁盘使用率\ndata_name=\"/\" \ndiskUsage=$(df -h | grep -w $data_name | awk '{print $5}' | sed 's/%//')\n\n# 获取内存情况\nmem_total=$(free -m | awk 'NR==2 {print $2}')\nmem_used=$(free -m | awk 'NR==2 {print $3}')\n\n# 统计内存使用率\nmem_used_percent=$(echo \"scale=2; ($mem_used / $mem_total) * 100\" | bc)\n\n# 获取报警时间\nnow_time=$(date '+%F %T')\n\nuser=\"18857415467\"\n\n# 主机信息\nDate_time=$(date \"+%Y-%m-%d--%H:%M:%S\")\nIP_addr=$(hostname -I | awk '{print $1}')\n\n# webhook url\nDingding_Url=\"https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5\"\n\nfunction SendDownMessageToDingding(){\n    # 发送钉钉消息\n    curl -s \"${Dingding_Url}\" -H 'Content-Type: application/json' -d \"\n    {\n     'msgtype': 'text',\n     'text': {'content': '资源耗尽警告！\\n巡查时间：${Date_time}\\nIP地址：${IP_addr}\\n资源状况如下:\\n【CPU使用率：${cpuUsage}%】\\n【磁盘使用率：${diskUsage}%】\\n【内存使用率：${mem_used_percent}%】'},\n     'at': {'atMobiles': ['${user}'], 'isAtAll': true}\n      }\"\n}\n\nfunction check(){\n    cpuUsage=$(get_cpu_usage)\n    if (( $(echo \"$cpuUsage > 90\" | bc -l) )); then\n        echo \"检测到CPU使用率高于90%，开始1分钟监控...\"\n        high_cpu_duration=0\n        for ((i=0; i<60; i++)); do\n            sleep 1\n            cpuUsage=$(get_cpu_usage)\n            if (( $(echo \"$cpuUsage > 90\" | bc -l) )); then\n                ((high_cpu_duration++))\n            else\n                high_cpu_duration=0\n            fi\n\n            if (( high_cpu_duration >= 60 )); then\n                echo \"CPU使用率持续高于90%超过1分钟，发送警报...\"\n                SendDownMessageToDingding\n                break\n            fi\n        done\n    fi\n\n    if (( $(echo \"$diskUsage > 80\" | bc -l) )) || (( $(echo \"$mem_used_percent > 80\" | bc -l) )); then\n        SendDownMessageToDingding\n    fi\n}\n\ncheck\n\n```\n\n将`073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5`替换为你从钉钉获取的Webhook URL的token。\n\n### 3. 配置定时任务（cron）\n\n通过cron定期运行这个脚本。首先，编辑cron配置：\n\n```sh\ncrontab -e\n```\n\n然后添加以下内容以每分钟运行一次脚本：\n\n```sh\n* * * * * /path/to/monitor.sh\n```\n\n确保脚本`monitor.sh`有执行权限：\n\n```sh\nchmod +x /path/to/monitor.sh\n```\n\n### 总结\n\n上述脚本和cron配置将监控CPU、内存和硬盘使用情况，并在超过设定的阈值时通过钉钉发送告警消息。你可以根据实际需求调整脚本的执行频率和告警阈值。","slug":"linux下实现钉钉告警","published":1,"updated":"2024-07-23T06:33:29.150Z","_id":"clyy0czza0000ekjd56lj7ocd","comments":1,"layout":"post","photos":[],"content":"<p>在Linux系统中，可以使用Shell脚本和定时任务（cron）来监控CPU、内存和硬盘使用情况，当超过指定阈值时发送告警。为了发送钉钉告警，需要用到钉钉的自定义机器人接口。<br>需要注意的是，本教程的机器是12核心。因此需要得到12核心的最高cpu使用率后取最大值。</p>\n<p>以下是实现此功能的步骤：</p>\n<ol>\n<li><p><strong>创建钉钉机器人并获取Webhook URL：</strong></p>\n<ul>\n<li>登录钉钉，创建自定义机器人并获取Webhook URL，用于发送告警信息。</li>\n</ul>\n</li>\n<li><p><strong>编写Shell脚本：</strong></p>\n<ul>\n<li>编写一个Shell脚本来检查系统资源的使用情况，并在超过阈值时发送钉钉告警。</li>\n</ul>\n</li>\n<li><p><strong>配置定时任务（cron）：</strong></p>\n<ul>\n<li>将脚本配置为定时任务，定期检查系统资源的使用情况。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-创建钉钉机器人并获取Webhook-URL\"><a href=\"#1-创建钉钉机器人并获取Webhook-URL\" class=\"headerlink\" title=\"1. 创建钉钉机器人并获取Webhook URL\"></a>1. 创建钉钉机器人并获取Webhook URL</h3><p>在钉钉中创建自定义机器人，记录下Webhook URL，这将在脚本中用于发送告警。</p>\n<ul>\n<li>例如：<a href=\"https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5\">https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5</a></li>\n</ul>\n<h3 id=\"2-编写Shell脚本\"><a href=\"#2-编写Shell脚本\" class=\"headerlink\" title=\"2. 编写Shell脚本\"></a>2. 编写Shell脚本</h3><p>下面是一个示例Shell脚本<code>monitor.sh</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-comment\"># 获取cpu使用率</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">get_cpu_usage</span></span>()&#123;<br>    <span class=\"hljs-built_in\">echo</span> $(top -bn1 | grep <span class=\"hljs-string\">&quot;Cpu(s)&quot;</span> | awk <span class=\"hljs-string\">&#x27;&#123;print 100 - $8&#125;&#x27;</span> | awk <span class=\"hljs-string\">&#x27;&#123;printf &quot;%.2f&quot;, $1&#125;&#x27;</span>)<br>&#125;<br><br><span class=\"hljs-comment\"># 获取磁盘使用率</span><br>data_name=<span class=\"hljs-string\">&quot;/&quot;</span> <br>diskUsage=$(<span class=\"hljs-built_in\">df</span> -h | grep -w <span class=\"hljs-variable\">$data_name</span> | awk <span class=\"hljs-string\">&#x27;&#123;print $5&#125;&#x27;</span> | sed <span class=\"hljs-string\">&#x27;s/%//&#x27;</span>)<br><br><span class=\"hljs-comment\"># 获取内存情况</span><br>mem_total=$(free -m | awk <span class=\"hljs-string\">&#x27;NR==2 &#123;print $2&#125;&#x27;</span>)<br>mem_used=$(free -m | awk <span class=\"hljs-string\">&#x27;NR==2 &#123;print $3&#125;&#x27;</span>)<br><br><span class=\"hljs-comment\"># 统计内存使用率</span><br>mem_used_percent=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;scale=2; (<span class=\"hljs-variable\">$mem_used</span> / <span class=\"hljs-variable\">$mem_total</span>) * 100&quot;</span> | bc)<br><br><span class=\"hljs-comment\"># 获取报警时间</span><br>now_time=$(<span class=\"hljs-built_in\">date</span> <span class=\"hljs-string\">&#x27;+%F %T&#x27;</span>)<br><br>user=<span class=\"hljs-string\">&quot;18857415467&quot;</span><br><br><span class=\"hljs-comment\"># 主机信息</span><br>Date_time=$(<span class=\"hljs-built_in\">date</span> <span class=\"hljs-string\">&quot;+%Y-%m-%d--%H:%M:%S&quot;</span>)<br>IP_addr=$(hostname -I | awk <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span>)<br><br><span class=\"hljs-comment\"># webhook url</span><br>Dingding_Url=<span class=\"hljs-string\">&quot;https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5&quot;</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">SendDownMessageToDingding</span></span>()&#123;<br>    <span class=\"hljs-comment\"># 发送钉钉消息</span><br>    curl -s <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;Dingding_Url&#125;</span>&quot;</span> -H <span class=\"hljs-string\">&#x27;Content-Type: application/json&#x27;</span> -d <span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">     &#x27;msgtype&#x27;: &#x27;text&#x27;,</span><br><span class=\"hljs-string\">     &#x27;text&#x27;: &#123;&#x27;content&#x27;: &#x27;资源耗尽警告！\\n巡查时间：<span class=\"hljs-variable\">$&#123;Date_time&#125;</span>\\nIP地址：<span class=\"hljs-variable\">$&#123;IP_addr&#125;</span>\\n资源状况如下:\\n【CPU使用率：<span class=\"hljs-variable\">$&#123;cpuUsage&#125;</span>%】\\n【磁盘使用率：<span class=\"hljs-variable\">$&#123;diskUsage&#125;</span>%】\\n【内存使用率：<span class=\"hljs-variable\">$&#123;mem_used_percent&#125;</span>%】&#x27;&#125;,</span><br><span class=\"hljs-string\">     &#x27;at&#x27;: &#123;&#x27;atMobiles&#x27;: [&#x27;<span class=\"hljs-variable\">$&#123;user&#125;</span>&#x27;], &#x27;isAtAll&#x27;: true&#125;</span><br><span class=\"hljs-string\">      &#125;&quot;</span><br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">check</span></span>()&#123;<br>    cpuUsage=$(get_cpu_usage)<br>    <span class=\"hljs-keyword\">if</span> (( $(echo &quot;<span class=\"hljs-variable\">$cpuUsage</span> &gt; <span class=\"hljs-number\">90</span>&quot; | bc -l) )); <span class=\"hljs-keyword\">then</span><br>        <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;检测到CPU使用率高于90%，开始1分钟监控...&quot;</span><br>        high_cpu_duration=0<br>        <span class=\"hljs-keyword\">for</span> ((i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">60</span>; i++)); <span class=\"hljs-keyword\">do</span><br>            <span class=\"hljs-built_in\">sleep</span> 1<br>            cpuUsage=$(get_cpu_usage)<br>            <span class=\"hljs-keyword\">if</span> (( $(echo &quot;<span class=\"hljs-variable\">$cpuUsage</span> &gt; <span class=\"hljs-number\">90</span>&quot; | bc -l) )); <span class=\"hljs-keyword\">then</span><br>                ((high_cpu_duration++))<br>            <span class=\"hljs-keyword\">else</span><br>                high_cpu_duration=0<br>            <span class=\"hljs-keyword\">fi</span><br><br>            <span class=\"hljs-keyword\">if</span> (( high_cpu_duration &gt;= <span class=\"hljs-number\">60</span> )); <span class=\"hljs-keyword\">then</span><br>                <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;CPU使用率持续高于90%超过1分钟，发送警报...&quot;</span><br>                SendDownMessageToDingding<br>                <span class=\"hljs-built_in\">break</span><br>            <span class=\"hljs-keyword\">fi</span><br>        <span class=\"hljs-keyword\">done</span><br>    <span class=\"hljs-keyword\">fi</span><br><br>    <span class=\"hljs-keyword\">if</span> (( $(echo &quot;<span class=\"hljs-variable\">$diskUsage</span> &gt; <span class=\"hljs-number\">80</span>&quot; | bc -l) )) || (( $(echo &quot;<span class=\"hljs-variable\">$mem_used_percent</span> &gt; <span class=\"hljs-number\">80</span>&quot; | bc -l) )); <span class=\"hljs-keyword\">then</span><br>        SendDownMessageToDingding<br>    <span class=\"hljs-keyword\">fi</span><br>&#125;<br><br>check<br><br></code></pre></td></tr></table></figure>\n\n<p>将<code>073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5</code>替换为你从钉钉获取的Webhook URL的token。</p>\n<h3 id=\"3-配置定时任务（cron）\"><a href=\"#3-配置定时任务（cron）\" class=\"headerlink\" title=\"3. 配置定时任务（cron）\"></a>3. 配置定时任务（cron）</h3><p>通过cron定期运行这个脚本。首先，编辑cron配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">crontab -e<br></code></pre></td></tr></table></figure>\n\n<p>然后添加以下内容以每分钟运行一次脚本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">* * * * * /path/to/monitor.sh<br></code></pre></td></tr></table></figure>\n\n<p>确保脚本<code>monitor.sh</code>有执行权限：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">chmod</span> +x /path/to/monitor.sh<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上述脚本和cron配置将监控CPU、内存和硬盘使用情况，并在超过设定的阈值时通过钉钉发送告警消息。你可以根据实际需求调整脚本的执行频率和告警阈值。</p>\n","excerpt":"","more":"<p>在Linux系统中，可以使用Shell脚本和定时任务（cron）来监控CPU、内存和硬盘使用情况，当超过指定阈值时发送告警。为了发送钉钉告警，需要用到钉钉的自定义机器人接口。<br>需要注意的是，本教程的机器是12核心。因此需要得到12核心的最高cpu使用率后取最大值。</p>\n<p>以下是实现此功能的步骤：</p>\n<ol>\n<li><p><strong>创建钉钉机器人并获取Webhook URL：</strong></p>\n<ul>\n<li>登录钉钉，创建自定义机器人并获取Webhook URL，用于发送告警信息。</li>\n</ul>\n</li>\n<li><p><strong>编写Shell脚本：</strong></p>\n<ul>\n<li>编写一个Shell脚本来检查系统资源的使用情况，并在超过阈值时发送钉钉告警。</li>\n</ul>\n</li>\n<li><p><strong>配置定时任务（cron）：</strong></p>\n<ul>\n<li>将脚本配置为定时任务，定期检查系统资源的使用情况。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-创建钉钉机器人并获取Webhook-URL\"><a href=\"#1-创建钉钉机器人并获取Webhook-URL\" class=\"headerlink\" title=\"1. 创建钉钉机器人并获取Webhook URL\"></a>1. 创建钉钉机器人并获取Webhook URL</h3><p>在钉钉中创建自定义机器人，记录下Webhook URL，这将在脚本中用于发送告警。</p>\n<ul>\n<li>例如：<a href=\"https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5\">https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5</a></li>\n</ul>\n<h3 id=\"2-编写Shell脚本\"><a href=\"#2-编写Shell脚本\" class=\"headerlink\" title=\"2. 编写Shell脚本\"></a>2. 编写Shell脚本</h3><p>下面是一个示例Shell脚本<code>monitor.sh</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-comment\"># 获取cpu使用率</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">get_cpu_usage</span></span>()&#123;<br>    <span class=\"hljs-built_in\">echo</span> $(top -bn1 | grep <span class=\"hljs-string\">&quot;Cpu(s)&quot;</span> | awk <span class=\"hljs-string\">&#x27;&#123;print 100 - $8&#125;&#x27;</span> | awk <span class=\"hljs-string\">&#x27;&#123;printf &quot;%.2f&quot;, $1&#125;&#x27;</span>)<br>&#125;<br><br><span class=\"hljs-comment\"># 获取磁盘使用率</span><br>data_name=<span class=\"hljs-string\">&quot;/&quot;</span> <br>diskUsage=$(<span class=\"hljs-built_in\">df</span> -h | grep -w <span class=\"hljs-variable\">$data_name</span> | awk <span class=\"hljs-string\">&#x27;&#123;print $5&#125;&#x27;</span> | sed <span class=\"hljs-string\">&#x27;s/%//&#x27;</span>)<br><br><span class=\"hljs-comment\"># 获取内存情况</span><br>mem_total=$(free -m | awk <span class=\"hljs-string\">&#x27;NR==2 &#123;print $2&#125;&#x27;</span>)<br>mem_used=$(free -m | awk <span class=\"hljs-string\">&#x27;NR==2 &#123;print $3&#125;&#x27;</span>)<br><br><span class=\"hljs-comment\"># 统计内存使用率</span><br>mem_used_percent=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;scale=2; (<span class=\"hljs-variable\">$mem_used</span> / <span class=\"hljs-variable\">$mem_total</span>) * 100&quot;</span> | bc)<br><br><span class=\"hljs-comment\"># 获取报警时间</span><br>now_time=$(<span class=\"hljs-built_in\">date</span> <span class=\"hljs-string\">&#x27;+%F %T&#x27;</span>)<br><br>user=<span class=\"hljs-string\">&quot;18857415467&quot;</span><br><br><span class=\"hljs-comment\"># 主机信息</span><br>Date_time=$(<span class=\"hljs-built_in\">date</span> <span class=\"hljs-string\">&quot;+%Y-%m-%d--%H:%M:%S&quot;</span>)<br>IP_addr=$(hostname -I | awk <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span>)<br><br><span class=\"hljs-comment\"># webhook url</span><br>Dingding_Url=<span class=\"hljs-string\">&quot;https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5&quot;</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">SendDownMessageToDingding</span></span>()&#123;<br>    <span class=\"hljs-comment\"># 发送钉钉消息</span><br>    curl -s <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;Dingding_Url&#125;</span>&quot;</span> -H <span class=\"hljs-string\">&#x27;Content-Type: application/json&#x27;</span> -d <span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">     &#x27;msgtype&#x27;: &#x27;text&#x27;,</span><br><span class=\"hljs-string\">     &#x27;text&#x27;: &#123;&#x27;content&#x27;: &#x27;资源耗尽警告！\\n巡查时间：<span class=\"hljs-variable\">$&#123;Date_time&#125;</span>\\nIP地址：<span class=\"hljs-variable\">$&#123;IP_addr&#125;</span>\\n资源状况如下:\\n【CPU使用率：<span class=\"hljs-variable\">$&#123;cpuUsage&#125;</span>%】\\n【磁盘使用率：<span class=\"hljs-variable\">$&#123;diskUsage&#125;</span>%】\\n【内存使用率：<span class=\"hljs-variable\">$&#123;mem_used_percent&#125;</span>%】&#x27;&#125;,</span><br><span class=\"hljs-string\">     &#x27;at&#x27;: &#123;&#x27;atMobiles&#x27;: [&#x27;<span class=\"hljs-variable\">$&#123;user&#125;</span>&#x27;], &#x27;isAtAll&#x27;: true&#125;</span><br><span class=\"hljs-string\">      &#125;&quot;</span><br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">check</span></span>()&#123;<br>    cpuUsage=$(get_cpu_usage)<br>    <span class=\"hljs-keyword\">if</span> (( $(echo &quot;<span class=\"hljs-variable\">$cpuUsage</span> &gt; <span class=\"hljs-number\">90</span>&quot; | bc -l) )); <span class=\"hljs-keyword\">then</span><br>        <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;检测到CPU使用率高于90%，开始1分钟监控...&quot;</span><br>        high_cpu_duration=0<br>        <span class=\"hljs-keyword\">for</span> ((i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">60</span>; i++)); <span class=\"hljs-keyword\">do</span><br>            <span class=\"hljs-built_in\">sleep</span> 1<br>            cpuUsage=$(get_cpu_usage)<br>            <span class=\"hljs-keyword\">if</span> (( $(echo &quot;<span class=\"hljs-variable\">$cpuUsage</span> &gt; <span class=\"hljs-number\">90</span>&quot; | bc -l) )); <span class=\"hljs-keyword\">then</span><br>                ((high_cpu_duration++))<br>            <span class=\"hljs-keyword\">else</span><br>                high_cpu_duration=0<br>            <span class=\"hljs-keyword\">fi</span><br><br>            <span class=\"hljs-keyword\">if</span> (( high_cpu_duration &gt;= <span class=\"hljs-number\">60</span> )); <span class=\"hljs-keyword\">then</span><br>                <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;CPU使用率持续高于90%超过1分钟，发送警报...&quot;</span><br>                SendDownMessageToDingding<br>                <span class=\"hljs-built_in\">break</span><br>            <span class=\"hljs-keyword\">fi</span><br>        <span class=\"hljs-keyword\">done</span><br>    <span class=\"hljs-keyword\">fi</span><br><br>    <span class=\"hljs-keyword\">if</span> (( $(echo &quot;<span class=\"hljs-variable\">$diskUsage</span> &gt; <span class=\"hljs-number\">80</span>&quot; | bc -l) )) || (( $(echo &quot;<span class=\"hljs-variable\">$mem_used_percent</span> &gt; <span class=\"hljs-number\">80</span>&quot; | bc -l) )); <span class=\"hljs-keyword\">then</span><br>        SendDownMessageToDingding<br>    <span class=\"hljs-keyword\">fi</span><br>&#125;<br><br>check<br><br></code></pre></td></tr></table></figure>\n\n<p>将<code>073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5</code>替换为你从钉钉获取的Webhook URL的token。</p>\n<h3 id=\"3-配置定时任务（cron）\"><a href=\"#3-配置定时任务（cron）\" class=\"headerlink\" title=\"3. 配置定时任务（cron）\"></a>3. 配置定时任务（cron）</h3><p>通过cron定期运行这个脚本。首先，编辑cron配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">crontab -e<br></code></pre></td></tr></table></figure>\n\n<p>然后添加以下内容以每分钟运行一次脚本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">* * * * * /path/to/monitor.sh<br></code></pre></td></tr></table></figure>\n\n<p>确保脚本<code>monitor.sh</code>有执行权限：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">chmod</span> +x /path/to/monitor.sh<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上述脚本和cron配置将监控CPU、内存和硬盘使用情况，并在超过设定的阈值时通过钉钉发送告警消息。你可以根据实际需求调整脚本的执行频率和告警阈值。</p>\n"},{"title":"docker修改应用为自动启动","date":"2024-07-23T06:39:38.000Z","_content":"是的，Docker 提供了一种简单的方法来配置容器在系统启动时自动启动，这就是使用 `docker update` 命令配置容器的重启策略。\n\n以下是如何使用 `docker update` 命令来配置现有的容器在系统启动时自动启动：\n\n```bash\ndocker update --restart unless-stopped <container_name_or_id>\n```\n\n例如，如果你的容器名为 `mysql-container`，你可以这样配置：\n\n```bash\ndocker update --restart unless-stopped mysql-container\n```\n\n这样配置后，当系统重启时，Docker 会根据 `unless-stopped` 策略自动重启该容器。以下是一些常用的重启策略：\n\n- `no`: 容器不会自动重启（默认值）。\n- `on-failure`: 仅当容器退出状态非零时才重启。\n- `always`: 无论退出状态如何，总是重启容器。\n- `unless-stopped`: 容器除非被手动停止，否则总是重启。\n\n### 示例\n\n以下是一个完整的示例，展示如何启动一个新的 MySQL 容器并配置其在系统重启时自动启动：\n\n1. 启动一个 MySQL 容器：\n\n    ```bash\n    docker run -d \\\n        --name mysql-container \\\n        -e MYSQL_ROOT_PASSWORD=my-secret-pw \\\n        -v /my/own/datadir:/var/lib/mysql \\\n        mysql:latest\n    ```\n\n2. 配置容器的重启策略：\n\n    ```bash\n    docker update --restart unless-stopped mysql-container\n    ```\n\n### 检查容器重启策略\n\n你可以使用以下命令来检查容器的重启策略：\n\n```bash\ndocker inspect -f '{{ .HostConfig.RestartPolicy.Name }}' mysql-container\n```\n\n这将输出容器的当前重启策略。\n\n### 使用 Docker Compose\n\n如果你使用 Docker Compose，可以在 `docker-compose.yml` 文件中配置重启策略：\n\n```yaml\nversion: '3.8'\n\nservices:\n  mysql:\n    image: mysql:latest\n    container_name: mysql-container\n    environment:\n      MYSQL_ROOT_PASSWORD: my-secret-pw\n    volumes:\n      - /my/own/datadir:/var/lib/mysql\n    restart: unless-stopped\n```\n\n然后，使用以下命令启动容器：\n\n```bash\ndocker-compose up -d\n```\n\n### 总结\n\n通过上述方法，你可以轻松地配置 Docker 容器在系统重启时自动启动，无论是通过 `docker run`、`docker update` 还是 `docker-compose`。","source":"_posts/docker修改应用为自动启动.md","raw":"---\ntitle: docker修改应用为自动启动\ndate: 2024-07-23 14:39:38\ntags:\n---\n是的，Docker 提供了一种简单的方法来配置容器在系统启动时自动启动，这就是使用 `docker update` 命令配置容器的重启策略。\n\n以下是如何使用 `docker update` 命令来配置现有的容器在系统启动时自动启动：\n\n```bash\ndocker update --restart unless-stopped <container_name_or_id>\n```\n\n例如，如果你的容器名为 `mysql-container`，你可以这样配置：\n\n```bash\ndocker update --restart unless-stopped mysql-container\n```\n\n这样配置后，当系统重启时，Docker 会根据 `unless-stopped` 策略自动重启该容器。以下是一些常用的重启策略：\n\n- `no`: 容器不会自动重启（默认值）。\n- `on-failure`: 仅当容器退出状态非零时才重启。\n- `always`: 无论退出状态如何，总是重启容器。\n- `unless-stopped`: 容器除非被手动停止，否则总是重启。\n\n### 示例\n\n以下是一个完整的示例，展示如何启动一个新的 MySQL 容器并配置其在系统重启时自动启动：\n\n1. 启动一个 MySQL 容器：\n\n    ```bash\n    docker run -d \\\n        --name mysql-container \\\n        -e MYSQL_ROOT_PASSWORD=my-secret-pw \\\n        -v /my/own/datadir:/var/lib/mysql \\\n        mysql:latest\n    ```\n\n2. 配置容器的重启策略：\n\n    ```bash\n    docker update --restart unless-stopped mysql-container\n    ```\n\n### 检查容器重启策略\n\n你可以使用以下命令来检查容器的重启策略：\n\n```bash\ndocker inspect -f '{{ .HostConfig.RestartPolicy.Name }}' mysql-container\n```\n\n这将输出容器的当前重启策略。\n\n### 使用 Docker Compose\n\n如果你使用 Docker Compose，可以在 `docker-compose.yml` 文件中配置重启策略：\n\n```yaml\nversion: '3.8'\n\nservices:\n  mysql:\n    image: mysql:latest\n    container_name: mysql-container\n    environment:\n      MYSQL_ROOT_PASSWORD: my-secret-pw\n    volumes:\n      - /my/own/datadir:/var/lib/mysql\n    restart: unless-stopped\n```\n\n然后，使用以下命令启动容器：\n\n```bash\ndocker-compose up -d\n```\n\n### 总结\n\n通过上述方法，你可以轻松地配置 Docker 容器在系统重启时自动启动，无论是通过 `docker run`、`docker update` 还是 `docker-compose`。","slug":"docker修改应用为自动启动","published":1,"updated":"2024-07-23T08:19:46.060Z","_id":"clyy530le00002wjdhqbdab90","comments":1,"layout":"post","photos":[],"content":"<p>是的，Docker 提供了一种简单的方法来配置容器在系统启动时自动启动，这就是使用 <code>docker update</code> 命令配置容器的重启策略。</p>\n<p>以下是如何使用 <code>docker update</code> 命令来配置现有的容器在系统启动时自动启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker update --restart unless-stopped &lt;container_name_or_id&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，如果你的容器名为 <code>mysql-container</code>，你可以这样配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker update --restart unless-stopped mysql-container<br></code></pre></td></tr></table></figure>\n\n<p>这样配置后，当系统重启时，Docker 会根据 <code>unless-stopped</code> 策略自动重启该容器。以下是一些常用的重启策略：</p>\n<ul>\n<li><code>no</code>: 容器不会自动重启（默认值）。</li>\n<li><code>on-failure</code>: 仅当容器退出状态非零时才重启。</li>\n<li><code>always</code>: 无论退出状态如何，总是重启容器。</li>\n<li><code>unless-stopped</code>: 容器除非被手动停止，否则总是重启。</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个完整的示例，展示如何启动一个新的 MySQL 容器并配置其在系统重启时自动启动：</p>\n<ol>\n<li><p>启动一个 MySQL 容器：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -d \\<br>    --name mysql-container \\<br>    -e MYSQL_ROOT_PASSWORD=my-secret-pw \\<br>    -v /my/own/datadir:/var/lib/mysql \\<br>    mysql:latest<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>配置容器的重启策略：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker update --restart unless-stopped mysql-container<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"检查容器重启策略\"><a href=\"#检查容器重启策略\" class=\"headerlink\" title=\"检查容器重启策略\"></a>检查容器重启策略</h3><p>你可以使用以下命令来检查容器的重启策略：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker inspect -f <span class=\"hljs-string\">&#x27;&#123;&#123; .HostConfig.RestartPolicy.Name &#125;&#125;&#x27;</span> mysql-container<br></code></pre></td></tr></table></figure>\n\n<p>这将输出容器的当前重启策略。</p>\n<h3 id=\"使用-Docker-Compose\"><a href=\"#使用-Docker-Compose\" class=\"headerlink\" title=\"使用 Docker Compose\"></a>使用 Docker Compose</h3><p>如果你使用 Docker Compose，可以在 <code>docker-compose.yml</code> 文件中配置重启策略：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.8&#x27;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">mysql:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:latest</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-container</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">my-secret-pw</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/my/own/datadir:/var/lib/mysql</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">unless-stopped</span><br></code></pre></td></tr></table></figure>\n\n<p>然后，使用以下命令启动容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose up -d<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过上述方法，你可以轻松地配置 Docker 容器在系统重启时自动启动，无论是通过 <code>docker run</code>、<code>docker update</code> 还是 <code>docker-compose</code>。</p>\n","excerpt":"","more":"<p>是的，Docker 提供了一种简单的方法来配置容器在系统启动时自动启动，这就是使用 <code>docker update</code> 命令配置容器的重启策略。</p>\n<p>以下是如何使用 <code>docker update</code> 命令来配置现有的容器在系统启动时自动启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker update --restart unless-stopped &lt;container_name_or_id&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如，如果你的容器名为 <code>mysql-container</code>，你可以这样配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker update --restart unless-stopped mysql-container<br></code></pre></td></tr></table></figure>\n\n<p>这样配置后，当系统重启时，Docker 会根据 <code>unless-stopped</code> 策略自动重启该容器。以下是一些常用的重启策略：</p>\n<ul>\n<li><code>no</code>: 容器不会自动重启（默认值）。</li>\n<li><code>on-failure</code>: 仅当容器退出状态非零时才重启。</li>\n<li><code>always</code>: 无论退出状态如何，总是重启容器。</li>\n<li><code>unless-stopped</code>: 容器除非被手动停止，否则总是重启。</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个完整的示例，展示如何启动一个新的 MySQL 容器并配置其在系统重启时自动启动：</p>\n<ol>\n<li><p>启动一个 MySQL 容器：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -d \\<br>    --name mysql-container \\<br>    -e MYSQL_ROOT_PASSWORD=my-secret-pw \\<br>    -v /my/own/datadir:/var/lib/mysql \\<br>    mysql:latest<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>配置容器的重启策略：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker update --restart unless-stopped mysql-container<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"检查容器重启策略\"><a href=\"#检查容器重启策略\" class=\"headerlink\" title=\"检查容器重启策略\"></a>检查容器重启策略</h3><p>你可以使用以下命令来检查容器的重启策略：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker inspect -f <span class=\"hljs-string\">&#x27;&#123;&#123; .HostConfig.RestartPolicy.Name &#125;&#125;&#x27;</span> mysql-container<br></code></pre></td></tr></table></figure>\n\n<p>这将输出容器的当前重启策略。</p>\n<h3 id=\"使用-Docker-Compose\"><a href=\"#使用-Docker-Compose\" class=\"headerlink\" title=\"使用 Docker Compose\"></a>使用 Docker Compose</h3><p>如果你使用 Docker Compose，可以在 <code>docker-compose.yml</code> 文件中配置重启策略：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.8&#x27;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">mysql:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:latest</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-container</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">my-secret-pw</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/my/own/datadir:/var/lib/mysql</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">unless-stopped</span><br></code></pre></td></tr></table></figure>\n\n<p>然后，使用以下命令启动容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose up -d<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过上述方法，你可以轻松地配置 Docker 容器在系统重启时自动启动，无论是通过 <code>docker run</code>、<code>docker update</code> 还是 <code>docker-compose</code>。</p>\n"},{"title":"nginx配置上传文件大小","date":"2024-07-24T08:34:06.000Z","_content":"要在Nginx中配置上传文件，您需要对Nginx的配置文件进行一些修改。以下是一个示例配置，说明如何配置Nginx以支持文件上传：\n\n1. **配置Nginx处理上传文件的大小限制：**\n\n   打开您的Nginx配置文件（通常位于 `/etc/nginx/nginx.conf` 或 `/etc/nginx/conf.d/default.conf`）并找到 `http` 块或 `server` 块。\n\n   ```nginx\n   http {\n       # 其他配置...\n       \n       # 设置客户端上传文件的最大限制（单位：字节）\n       client_max_body_size 50M;\n\n       server {\n           listen 80;\n           server_name example.com;\n\n           # 其他配置...\n\n           location /upload {\n               # 将文件上传到指定的目录\n               root /var/www/uploads;\n\n               # 其他配置...\n           }\n       }\n   }\n   ```\n\n   在这个示例中，`client_max_body_size` 被设置为 `50M`，这意味着客户端可以上传最大为50MB的文件。\n\n2. **配置上传文件的保存路径：**\n\n   您可以在 `location` 块中指定文件上传的路径。例如，上面的示例中，上传的文件将被保存到 `/var/www/uploads` 目录。\n\n3. **重启Nginx以使配置生效：**\n\n   修改完配置文件后，需要重启Nginx服务以使配置生效。\n\n   ```sh\n   sudo systemctl restart nginx\n   ```\n\n4. **处理上传的文件：**\n\n   需要注意的是，Nginx本身不会处理上传的文件，您需要在后端应用中处理这些文件。例如，您可以使用PHP、Python、Node.js等语言在后端处理文件上传。\n\n   这是一个使用PHP处理文件上传的简单示例：\n\n   ```php\n   <?php\n   if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_FILES['file'])) {\n       $uploadDir = '/var/www/uploads/';\n       $uploadFile = $uploadDir . basename($_FILES['file']['name']);\n\n       if (move_uploaded_file($_FILES['file']['tmp_name'], $uploadFile)) {\n           echo \"文件上传成功。\";\n       } else {\n           echo \"文件上传失败。\";\n       }\n   }\n   ?>\n   ```\n\n   然后在Nginx的配置文件中，您可以配置一个 `location` 块来处理文件上传请求：\n\n   ```nginx\n   location /upload {\n       root /var/www/uploads;\n\n       # 代理到后端PHP脚本\n       fastcgi_pass 127.0.0.1:9000;\n       include fastcgi_params;\n       fastcgi_param SCRIPT_FILENAME /var/www/html/upload.php;\n   }\n   ```\n","source":"_posts/nginx配置上传文件大小.md","raw":"---\ntitle: nginx配置上传文件大小\ndate: 2024-07-24 16:34:06\ntags:\n---\n要在Nginx中配置上传文件，您需要对Nginx的配置文件进行一些修改。以下是一个示例配置，说明如何配置Nginx以支持文件上传：\n\n1. **配置Nginx处理上传文件的大小限制：**\n\n   打开您的Nginx配置文件（通常位于 `/etc/nginx/nginx.conf` 或 `/etc/nginx/conf.d/default.conf`）并找到 `http` 块或 `server` 块。\n\n   ```nginx\n   http {\n       # 其他配置...\n       \n       # 设置客户端上传文件的最大限制（单位：字节）\n       client_max_body_size 50M;\n\n       server {\n           listen 80;\n           server_name example.com;\n\n           # 其他配置...\n\n           location /upload {\n               # 将文件上传到指定的目录\n               root /var/www/uploads;\n\n               # 其他配置...\n           }\n       }\n   }\n   ```\n\n   在这个示例中，`client_max_body_size` 被设置为 `50M`，这意味着客户端可以上传最大为50MB的文件。\n\n2. **配置上传文件的保存路径：**\n\n   您可以在 `location` 块中指定文件上传的路径。例如，上面的示例中，上传的文件将被保存到 `/var/www/uploads` 目录。\n\n3. **重启Nginx以使配置生效：**\n\n   修改完配置文件后，需要重启Nginx服务以使配置生效。\n\n   ```sh\n   sudo systemctl restart nginx\n   ```\n\n4. **处理上传的文件：**\n\n   需要注意的是，Nginx本身不会处理上传的文件，您需要在后端应用中处理这些文件。例如，您可以使用PHP、Python、Node.js等语言在后端处理文件上传。\n\n   这是一个使用PHP处理文件上传的简单示例：\n\n   ```php\n   <?php\n   if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_FILES['file'])) {\n       $uploadDir = '/var/www/uploads/';\n       $uploadFile = $uploadDir . basename($_FILES['file']['name']);\n\n       if (move_uploaded_file($_FILES['file']['tmp_name'], $uploadFile)) {\n           echo \"文件上传成功。\";\n       } else {\n           echo \"文件上传失败。\";\n       }\n   }\n   ?>\n   ```\n\n   然后在Nginx的配置文件中，您可以配置一个 `location` 块来处理文件上传请求：\n\n   ```nginx\n   location /upload {\n       root /var/www/uploads;\n\n       # 代理到后端PHP脚本\n       fastcgi_pass 127.0.0.1:9000;\n       include fastcgi_params;\n       fastcgi_param SCRIPT_FILENAME /var/www/html/upload.php;\n   }\n   ```\n","slug":"nginx配置上传文件大小","published":1,"updated":"2024-07-24T08:34:33.639Z","comments":1,"layout":"post","photos":[],"_id":"clyzl9kol0000sgjdafpg2ks6","content":"<p>要在Nginx中配置上传文件，您需要对Nginx的配置文件进行一些修改。以下是一个示例配置，说明如何配置Nginx以支持文件上传：</p>\n<ol>\n<li><p><strong>配置Nginx处理上传文件的大小限制：</strong></p>\n<p>打开您的Nginx配置文件（通常位于 <code>/etc/nginx/nginx.conf</code> 或 <code>/etc/nginx/conf.d/default.conf</code>）并找到 <code>http</code> 块或 <code>server</code> 块。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">http</span> &#123;<br>    <span class=\"hljs-comment\"># 其他配置...</span><br>    <br>    <span class=\"hljs-comment\"># 设置客户端上传文件的最大限制（单位：字节）</span><br>    <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">50M</span>;<br><br>    <span class=\"hljs-section\">server</span> &#123;<br>        <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>        <span class=\"hljs-attribute\">server_name</span> example.com;<br><br>        <span class=\"hljs-comment\"># 其他配置...</span><br><br>        <span class=\"hljs-section\">location</span> /upload &#123;<br>            <span class=\"hljs-comment\"># 将文件上传到指定的目录</span><br>            <span class=\"hljs-attribute\">root</span> /var/www/uploads;<br><br>            <span class=\"hljs-comment\"># 其他配置...</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>client_max_body_size</code> 被设置为 <code>50M</code>，这意味着客户端可以上传最大为50MB的文件。</p>\n</li>\n<li><p><strong>配置上传文件的保存路径：</strong></p>\n<p>您可以在 <code>location</code> 块中指定文件上传的路径。例如，上面的示例中，上传的文件将被保存到 <code>/var/www/uploads</code> 目录。</p>\n</li>\n<li><p><strong>重启Nginx以使配置生效：</strong></p>\n<p>修改完配置文件后，需要重启Nginx服务以使配置生效。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo systemctl restart nginx<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>处理上传的文件：</strong></p>\n<p>需要注意的是，Nginx本身不会处理上传的文件，您需要在后端应用中处理这些文件。例如，您可以使用PHP、Python、Node.js等语言在后端处理文件上传。</p>\n<p>这是一个使用PHP处理文件上传的简单示例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">&#x27;REQUEST_METHOD&#x27;</span>] == <span class=\"hljs-string\">&#x27;POST&#x27;</span> &amp;&amp; <span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_FILES</span>[<span class=\"hljs-string\">&#x27;file&#x27;</span>])) &#123;<br>    <span class=\"hljs-variable\">$uploadDir</span> = <span class=\"hljs-string\">&#x27;/var/www/uploads/&#x27;</span>;<br>    <span class=\"hljs-variable\">$uploadFile</span> = <span class=\"hljs-variable\">$uploadDir</span> . <span class=\"hljs-title function_ invoke__\">basename</span>(<span class=\"hljs-variable\">$_FILES</span>[<span class=\"hljs-string\">&#x27;file&#x27;</span>][<span class=\"hljs-string\">&#x27;name&#x27;</span>]);<br><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_ invoke__\">move_uploaded_file</span>(<span class=\"hljs-variable\">$_FILES</span>[<span class=\"hljs-string\">&#x27;file&#x27;</span>][<span class=\"hljs-string\">&#x27;tmp_name&#x27;</span>], <span class=\"hljs-variable\">$uploadFile</span>)) &#123;<br>        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;文件上传成功。&quot;</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;文件上传失败。&quot;</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>然后在Nginx的配置文件中，您可以配置一个 <code>location</code> 块来处理文件上传请求：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">location</span> /upload &#123;<br>    <span class=\"hljs-attribute\">root</span> /var/www/uploads;<br><br>    <span class=\"hljs-comment\"># 代理到后端PHP脚本</span><br>    <span class=\"hljs-attribute\">fastcgi_pass</span> <span class=\"hljs-number\">127.0.0.1:9000</span>;<br>    <span class=\"hljs-attribute\">include</span> fastcgi_params;<br>    <span class=\"hljs-attribute\">fastcgi_param</span> SCRIPT_FILENAME /var/www/html/upload.php;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<p>要在Nginx中配置上传文件，您需要对Nginx的配置文件进行一些修改。以下是一个示例配置，说明如何配置Nginx以支持文件上传：</p>\n<ol>\n<li><p><strong>配置Nginx处理上传文件的大小限制：</strong></p>\n<p>打开您的Nginx配置文件（通常位于 <code>/etc/nginx/nginx.conf</code> 或 <code>/etc/nginx/conf.d/default.conf</code>）并找到 <code>http</code> 块或 <code>server</code> 块。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">http</span> &#123;<br>    <span class=\"hljs-comment\"># 其他配置...</span><br>    <br>    <span class=\"hljs-comment\"># 设置客户端上传文件的最大限制（单位：字节）</span><br>    <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">50M</span>;<br><br>    <span class=\"hljs-section\">server</span> &#123;<br>        <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>        <span class=\"hljs-attribute\">server_name</span> example.com;<br><br>        <span class=\"hljs-comment\"># 其他配置...</span><br><br>        <span class=\"hljs-section\">location</span> /upload &#123;<br>            <span class=\"hljs-comment\"># 将文件上传到指定的目录</span><br>            <span class=\"hljs-attribute\">root</span> /var/www/uploads;<br><br>            <span class=\"hljs-comment\"># 其他配置...</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>client_max_body_size</code> 被设置为 <code>50M</code>，这意味着客户端可以上传最大为50MB的文件。</p>\n</li>\n<li><p><strong>配置上传文件的保存路径：</strong></p>\n<p>您可以在 <code>location</code> 块中指定文件上传的路径。例如，上面的示例中，上传的文件将被保存到 <code>/var/www/uploads</code> 目录。</p>\n</li>\n<li><p><strong>重启Nginx以使配置生效：</strong></p>\n<p>修改完配置文件后，需要重启Nginx服务以使配置生效。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo systemctl restart nginx<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>处理上传的文件：</strong></p>\n<p>需要注意的是，Nginx本身不会处理上传的文件，您需要在后端应用中处理这些文件。例如，您可以使用PHP、Python、Node.js等语言在后端处理文件上传。</p>\n<p>这是一个使用PHP处理文件上传的简单示例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">&#x27;REQUEST_METHOD&#x27;</span>] == <span class=\"hljs-string\">&#x27;POST&#x27;</span> &amp;&amp; <span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_FILES</span>[<span class=\"hljs-string\">&#x27;file&#x27;</span>])) &#123;<br>    <span class=\"hljs-variable\">$uploadDir</span> = <span class=\"hljs-string\">&#x27;/var/www/uploads/&#x27;</span>;<br>    <span class=\"hljs-variable\">$uploadFile</span> = <span class=\"hljs-variable\">$uploadDir</span> . <span class=\"hljs-title function_ invoke__\">basename</span>(<span class=\"hljs-variable\">$_FILES</span>[<span class=\"hljs-string\">&#x27;file&#x27;</span>][<span class=\"hljs-string\">&#x27;name&#x27;</span>]);<br><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_ invoke__\">move_uploaded_file</span>(<span class=\"hljs-variable\">$_FILES</span>[<span class=\"hljs-string\">&#x27;file&#x27;</span>][<span class=\"hljs-string\">&#x27;tmp_name&#x27;</span>], <span class=\"hljs-variable\">$uploadFile</span>)) &#123;<br>        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;文件上传成功。&quot;</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;文件上传失败。&quot;</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>然后在Nginx的配置文件中，您可以配置一个 <code>location</code> 块来处理文件上传请求：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">location</span> /upload &#123;<br>    <span class=\"hljs-attribute\">root</span> /var/www/uploads;<br><br>    <span class=\"hljs-comment\"># 代理到后端PHP脚本</span><br>    <span class=\"hljs-attribute\">fastcgi_pass</span> <span class=\"hljs-number\">127.0.0.1:9000</span>;<br>    <span class=\"hljs-attribute\">include</span> fastcgi_params;<br>    <span class=\"hljs-attribute\">fastcgi_param</span> SCRIPT_FILENAME /var/www/html/upload.php;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"tcp6 如何 改成tcp4","date":"2024-07-25T09:36:35.000Z","_content":"要将 TCP6（IPv6）转换为 TCP4（IPv4），具体步骤取决于你想要转换的上下文。例如，你可能想要在服务器配置、网络服务配置或者应用程序中进行这种转换。以下是几种常见的方法：\n\n### 1. 修改系统配置\n如果你的系统默认使用 IPv6，你可以通过修改系统配置来优先使用 IPv4。\n\n#### Linux\n编辑 `/etc/gai.conf` 文件，取消 `precedence ::ffff:0:0/96  100` 的注释。这会让系统优先使用 IPv4。\n\n```bash\nsudo nano /etc/gai.conf\n```\n\n取消下面这行的注释：\n```bash\nprecedence ::ffff:0:0/96  100\n```\n\n#### Windows\n可以通过命令行禁用IPv6：\n```bash\nnetsh interface ipv6 set prefixpolicy ::ffff:0:0/96  40 1\n```\n\n### 2. 配置网络服务\n对于具体的网络服务，你可以在配置文件中指定使用 IPv4。\n\n#### Nginx\n在 Nginx 配置文件中，你可以指定服务器监听的 IP 地址为 IPv4 地址。例如：\n\n```nginx\nserver {\n    listen 80;\n    listen [::]:80 ipv6only=off;\n    ...\n}\n```\n\n将上面的配置改为仅监听 IPv4 地址：\n```nginx\nserver {\n    listen 80;\n    ...\n}\n```\n\n#### Apache\n在 Apache 的配置文件中，你可以指定监听的 IP 地址：\n\n```apache\nListen 80\nListen [::]:80\n```\n\n将上面的配置改为仅监听 IPv4 地址：\n```apache\nListen 80\n```\n\n### 3. 修改应用程序配置\n对于某些应用程序，你可能需要修改代码或配置文件以确保它们仅使用 IPv4。\n\n#### Python\n在 Python 应用中，你可以通过 `socket` 模块指定仅使用 IPv4：\n\n```python\nimport socket\n\n# 创建一个IPv4的TCP socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.bind(('0.0.0.0', 8080))\nsock.listen(5)\n```\n\n#### Java\n在 Java 应用中，你可以设置 `java.net.preferIPv4Stack` 系统属性：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        System.setProperty(\"java.net.preferIPv4Stack\", \"true\");\n        // 其他代码\n    }\n}\n```\n\n### 总结\n具体的方法取决于你的具体需求和环境。在一般情况下，配置文件和系统设置通常可以解决大多数问题。如果你有更具体的应用或环境，请提供更多详细信息，我可以提供更具体的指导。","source":"_posts/tcp6-如何-改成tcp4.md","raw":"---\ntitle: tcp6 如何 改成tcp4\ndate: 2024-07-25 17:36:35\ntags:\n---\n要将 TCP6（IPv6）转换为 TCP4（IPv4），具体步骤取决于你想要转换的上下文。例如，你可能想要在服务器配置、网络服务配置或者应用程序中进行这种转换。以下是几种常见的方法：\n\n### 1. 修改系统配置\n如果你的系统默认使用 IPv6，你可以通过修改系统配置来优先使用 IPv4。\n\n#### Linux\n编辑 `/etc/gai.conf` 文件，取消 `precedence ::ffff:0:0/96  100` 的注释。这会让系统优先使用 IPv4。\n\n```bash\nsudo nano /etc/gai.conf\n```\n\n取消下面这行的注释：\n```bash\nprecedence ::ffff:0:0/96  100\n```\n\n#### Windows\n可以通过命令行禁用IPv6：\n```bash\nnetsh interface ipv6 set prefixpolicy ::ffff:0:0/96  40 1\n```\n\n### 2. 配置网络服务\n对于具体的网络服务，你可以在配置文件中指定使用 IPv4。\n\n#### Nginx\n在 Nginx 配置文件中，你可以指定服务器监听的 IP 地址为 IPv4 地址。例如：\n\n```nginx\nserver {\n    listen 80;\n    listen [::]:80 ipv6only=off;\n    ...\n}\n```\n\n将上面的配置改为仅监听 IPv4 地址：\n```nginx\nserver {\n    listen 80;\n    ...\n}\n```\n\n#### Apache\n在 Apache 的配置文件中，你可以指定监听的 IP 地址：\n\n```apache\nListen 80\nListen [::]:80\n```\n\n将上面的配置改为仅监听 IPv4 地址：\n```apache\nListen 80\n```\n\n### 3. 修改应用程序配置\n对于某些应用程序，你可能需要修改代码或配置文件以确保它们仅使用 IPv4。\n\n#### Python\n在 Python 应用中，你可以通过 `socket` 模块指定仅使用 IPv4：\n\n```python\nimport socket\n\n# 创建一个IPv4的TCP socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.bind(('0.0.0.0', 8080))\nsock.listen(5)\n```\n\n#### Java\n在 Java 应用中，你可以设置 `java.net.preferIPv4Stack` 系统属性：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        System.setProperty(\"java.net.preferIPv4Stack\", \"true\");\n        // 其他代码\n    }\n}\n```\n\n### 总结\n具体的方法取决于你的具体需求和环境。在一般情况下，配置文件和系统设置通常可以解决大多数问题。如果你有更具体的应用或环境，请提供更多详细信息，我可以提供更具体的指导。","slug":"tcp6-如何-改成tcp4","published":1,"updated":"2024-07-25T09:36:47.968Z","comments":1,"layout":"post","photos":[],"_id":"clz12xggl0000nojd0msu2vet","content":"<p>要将 TCP6（IPv6）转换为 TCP4（IPv4），具体步骤取决于你想要转换的上下文。例如，你可能想要在服务器配置、网络服务配置或者应用程序中进行这种转换。以下是几种常见的方法：</p>\n<h3 id=\"1-修改系统配置\"><a href=\"#1-修改系统配置\" class=\"headerlink\" title=\"1. 修改系统配置\"></a>1. 修改系统配置</h3><p>如果你的系统默认使用 IPv6，你可以通过修改系统配置来优先使用 IPv4。</p>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>编辑 <code>/etc/gai.conf</code> 文件，取消 <code>precedence ::ffff:0:0/96  100</code> 的注释。这会让系统优先使用 IPv4。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo nano /etc/gai.conf<br></code></pre></td></tr></table></figure>\n\n<p>取消下面这行的注释：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">precedence ::ffff:0:0/96  100<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>可以通过命令行禁用IPv6：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">netsh interface ipv6 <span class=\"hljs-built_in\">set</span> prefixpolicy ::ffff:0:0/96  40 1<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置网络服务\"><a href=\"#2-配置网络服务\" class=\"headerlink\" title=\"2. 配置网络服务\"></a>2. 配置网络服务</h3><p>对于具体的网络服务，你可以在配置文件中指定使用 IPv4。</p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>在 Nginx 配置文件中，你可以指定服务器监听的 IP 地址为 IPv4 地址。例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>    <span class=\"hljs-attribute\">listen</span> [::]:<span class=\"hljs-number\">80</span> ipv6only=<span class=\"hljs-literal\">off</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>将上面的配置改为仅监听 IPv4 地址：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>在 Apache 的配置文件中，你可以指定监听的 IP 地址：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">Listen</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attribute\">Listen</span><span class=\"hljs-meta\"> [::]:80</span><br></code></pre></td></tr></table></figure>\n\n<p>将上面的配置改为仅监听 IPv4 地址：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">Listen</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-修改应用程序配置\"><a href=\"#3-修改应用程序配置\" class=\"headerlink\" title=\"3. 修改应用程序配置\"></a>3. 修改应用程序配置</h3><p>对于某些应用程序，你可能需要修改代码或配置文件以确保它们仅使用 IPv4。</p>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><p>在 Python 应用中，你可以通过 <code>socket</code> 模块指定仅使用 IPv4：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><br><span class=\"hljs-comment\"># 创建一个IPv4的TCP socket</span><br>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sock.bind((<span class=\"hljs-string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"hljs-number\">8080</span>))<br>sock.listen(<span class=\"hljs-number\">5</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><p>在 Java 应用中，你可以设置 <code>java.net.preferIPv4Stack</code> 系统属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.setProperty(<span class=\"hljs-string\">&quot;java.net.preferIPv4Stack&quot;</span>, <span class=\"hljs-string\">&quot;true&quot;</span>);<br>        <span class=\"hljs-comment\">// 其他代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>具体的方法取决于你的具体需求和环境。在一般情况下，配置文件和系统设置通常可以解决大多数问题。如果你有更具体的应用或环境，请提供更多详细信息，我可以提供更具体的指导。</p>\n","excerpt":"","more":"<p>要将 TCP6（IPv6）转换为 TCP4（IPv4），具体步骤取决于你想要转换的上下文。例如，你可能想要在服务器配置、网络服务配置或者应用程序中进行这种转换。以下是几种常见的方法：</p>\n<h3 id=\"1-修改系统配置\"><a href=\"#1-修改系统配置\" class=\"headerlink\" title=\"1. 修改系统配置\"></a>1. 修改系统配置</h3><p>如果你的系统默认使用 IPv6，你可以通过修改系统配置来优先使用 IPv4。</p>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>编辑 <code>/etc/gai.conf</code> 文件，取消 <code>precedence ::ffff:0:0/96  100</code> 的注释。这会让系统优先使用 IPv4。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo nano /etc/gai.conf<br></code></pre></td></tr></table></figure>\n\n<p>取消下面这行的注释：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">precedence ::ffff:0:0/96  100<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>可以通过命令行禁用IPv6：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">netsh interface ipv6 <span class=\"hljs-built_in\">set</span> prefixpolicy ::ffff:0:0/96  40 1<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置网络服务\"><a href=\"#2-配置网络服务\" class=\"headerlink\" title=\"2. 配置网络服务\"></a>2. 配置网络服务</h3><p>对于具体的网络服务，你可以在配置文件中指定使用 IPv4。</p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>在 Nginx 配置文件中，你可以指定服务器监听的 IP 地址为 IPv4 地址。例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>    <span class=\"hljs-attribute\">listen</span> [::]:<span class=\"hljs-number\">80</span> ipv6only=<span class=\"hljs-literal\">off</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>将上面的配置改为仅监听 IPv4 地址：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>在 Apache 的配置文件中，你可以指定监听的 IP 地址：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">Listen</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attribute\">Listen</span><span class=\"hljs-meta\"> [::]:80</span><br></code></pre></td></tr></table></figure>\n\n<p>将上面的配置改为仅监听 IPv4 地址：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">Listen</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-修改应用程序配置\"><a href=\"#3-修改应用程序配置\" class=\"headerlink\" title=\"3. 修改应用程序配置\"></a>3. 修改应用程序配置</h3><p>对于某些应用程序，你可能需要修改代码或配置文件以确保它们仅使用 IPv4。</p>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><p>在 Python 应用中，你可以通过 <code>socket</code> 模块指定仅使用 IPv4：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><br><span class=\"hljs-comment\"># 创建一个IPv4的TCP socket</span><br>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sock.bind((<span class=\"hljs-string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"hljs-number\">8080</span>))<br>sock.listen(<span class=\"hljs-number\">5</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><p>在 Java 应用中，你可以设置 <code>java.net.preferIPv4Stack</code> 系统属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.setProperty(<span class=\"hljs-string\">&quot;java.net.preferIPv4Stack&quot;</span>, <span class=\"hljs-string\">&quot;true&quot;</span>);<br>        <span class=\"hljs-comment\">// 其他代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>具体的方法取决于你的具体需求和环境。在一般情况下，配置文件和系统设置通常可以解决大多数问题。如果你有更具体的应用或环境，请提供更多详细信息，我可以提供更具体的指导。</p>\n"},{"title":"select for update用法的好处","date":"2024-07-25T11:10:03.000Z","_content":"`SELECT FOR UPDATE` 是一种用于数据库管理系统（DBMS）的 SQL 语句，主要用于在事务处理过程中锁定选定的行，防止其他事务修改这些行，直到当前事务完成。这种机制在处理并发访问时尤其有用，以下是其具体好处：\n\n### 1. **避免脏读、不可重复读和幻读**\n通过使用 `SELECT FOR UPDATE`，可以锁定选定的行，确保其他事务无法对这些行进行修改，从而防止以下类型的并发问题：\n- **脏读**：一个事务可以读取到另一个未提交事务的修改。\n- **不可重复读**：一个事务在两次读取之间，另一个事务修改了数据，导致两次读取结果不同。\n- **幻读**：一个事务在两次读取之间，另一个事务插入了新行，导致第二次读取返回更多行。\n\n### 2. **确保一致性和完整性**\n在执行复杂的业务逻辑时，例如账户转账、库存更新等，使用 `SELECT FOR UPDATE` 可以确保在整个事务过程中数据的一致性和完整性。这样可以避免在事务中间其他事务对数据的修改，导致数据不一致。\n\n### 3. **防止丢失更新**\n当多个事务试图同时更新同一行时，`SELECT FOR UPDATE` 可以防止丢失更新问题。它确保一个事务完成后，其他事务才能继续执行更新操作，避免了两个事务的更新互相覆盖。\n\n### 4. **优化并发控制**\n使用 `SELECT FOR UPDATE` 可以提供细粒度的并发控制，通过只锁定必要的行，而不是整个表，从而提高系统的并发性能和资源利用率。\n\n### 5. **简化编程模型**\n`SELECT FOR UPDATE` 可以简化开发人员的编程模型，不需要手动处理复杂的锁机制，数据库会自动处理行锁定和释放，从而减少编程错误的机会。\n\n### 使用示例\n```sql\nBEGIN;\nSELECT * FROM accounts WHERE account_id = 1 FOR UPDATE;\n-- 执行一些需要锁定这行的操作，例如更新账户余额\nUPDATE accounts SET balance = balance - 100 WHERE account_id = 1;\nCOMMIT;\n```\n\n在这个示例中，通过 `SELECT FOR UPDATE` 锁定 `account_id = 1` 的行，确保在事务提交之前，没有其他事务可以修改该行。\n\n总的来说，`SELECT FOR UPDATE` 提供了一种强大的并发控制机制，帮助确保数据的完整性、一致性，并防止并发修改导致的问题。","source":"_posts/select-for-update用法的好处.md","raw":"---\ntitle: select for update用法的好处\ndate: 2024-07-25 19:10:03\ntags:\n---\n`SELECT FOR UPDATE` 是一种用于数据库管理系统（DBMS）的 SQL 语句，主要用于在事务处理过程中锁定选定的行，防止其他事务修改这些行，直到当前事务完成。这种机制在处理并发访问时尤其有用，以下是其具体好处：\n\n### 1. **避免脏读、不可重复读和幻读**\n通过使用 `SELECT FOR UPDATE`，可以锁定选定的行，确保其他事务无法对这些行进行修改，从而防止以下类型的并发问题：\n- **脏读**：一个事务可以读取到另一个未提交事务的修改。\n- **不可重复读**：一个事务在两次读取之间，另一个事务修改了数据，导致两次读取结果不同。\n- **幻读**：一个事务在两次读取之间，另一个事务插入了新行，导致第二次读取返回更多行。\n\n### 2. **确保一致性和完整性**\n在执行复杂的业务逻辑时，例如账户转账、库存更新等，使用 `SELECT FOR UPDATE` 可以确保在整个事务过程中数据的一致性和完整性。这样可以避免在事务中间其他事务对数据的修改，导致数据不一致。\n\n### 3. **防止丢失更新**\n当多个事务试图同时更新同一行时，`SELECT FOR UPDATE` 可以防止丢失更新问题。它确保一个事务完成后，其他事务才能继续执行更新操作，避免了两个事务的更新互相覆盖。\n\n### 4. **优化并发控制**\n使用 `SELECT FOR UPDATE` 可以提供细粒度的并发控制，通过只锁定必要的行，而不是整个表，从而提高系统的并发性能和资源利用率。\n\n### 5. **简化编程模型**\n`SELECT FOR UPDATE` 可以简化开发人员的编程模型，不需要手动处理复杂的锁机制，数据库会自动处理行锁定和释放，从而减少编程错误的机会。\n\n### 使用示例\n```sql\nBEGIN;\nSELECT * FROM accounts WHERE account_id = 1 FOR UPDATE;\n-- 执行一些需要锁定这行的操作，例如更新账户余额\nUPDATE accounts SET balance = balance - 100 WHERE account_id = 1;\nCOMMIT;\n```\n\n在这个示例中，通过 `SELECT FOR UPDATE` 锁定 `account_id = 1` 的行，确保在事务提交之前，没有其他事务可以修改该行。\n\n总的来说，`SELECT FOR UPDATE` 提供了一种强大的并发控制机制，帮助确保数据的完整性、一致性，并防止并发修改导致的问题。","slug":"select-for-update用法的好处","published":1,"updated":"2024-07-25T11:10:14.614Z","comments":1,"layout":"post","photos":[],"_id":"clz169lmq0000dsjd2rxq25rr","content":"<p><code>SELECT FOR UPDATE</code> 是一种用于数据库管理系统（DBMS）的 SQL 语句，主要用于在事务处理过程中锁定选定的行，防止其他事务修改这些行，直到当前事务完成。这种机制在处理并发访问时尤其有用，以下是其具体好处：</p>\n<h3 id=\"1-避免脏读、不可重复读和幻读\"><a href=\"#1-避免脏读、不可重复读和幻读\" class=\"headerlink\" title=\"1. 避免脏读、不可重复读和幻读\"></a>1. <strong>避免脏读、不可重复读和幻读</strong></h3><p>通过使用 <code>SELECT FOR UPDATE</code>，可以锁定选定的行，确保其他事务无法对这些行进行修改，从而防止以下类型的并发问题：</p>\n<ul>\n<li><strong>脏读</strong>：一个事务可以读取到另一个未提交事务的修改。</li>\n<li><strong>不可重复读</strong>：一个事务在两次读取之间，另一个事务修改了数据，导致两次读取结果不同。</li>\n<li><strong>幻读</strong>：一个事务在两次读取之间，另一个事务插入了新行，导致第二次读取返回更多行。</li>\n</ul>\n<h3 id=\"2-确保一致性和完整性\"><a href=\"#2-确保一致性和完整性\" class=\"headerlink\" title=\"2. 确保一致性和完整性\"></a>2. <strong>确保一致性和完整性</strong></h3><p>在执行复杂的业务逻辑时，例如账户转账、库存更新等，使用 <code>SELECT FOR UPDATE</code> 可以确保在整个事务过程中数据的一致性和完整性。这样可以避免在事务中间其他事务对数据的修改，导致数据不一致。</p>\n<h3 id=\"3-防止丢失更新\"><a href=\"#3-防止丢失更新\" class=\"headerlink\" title=\"3. 防止丢失更新\"></a>3. <strong>防止丢失更新</strong></h3><p>当多个事务试图同时更新同一行时，<code>SELECT FOR UPDATE</code> 可以防止丢失更新问题。它确保一个事务完成后，其他事务才能继续执行更新操作，避免了两个事务的更新互相覆盖。</p>\n<h3 id=\"4-优化并发控制\"><a href=\"#4-优化并发控制\" class=\"headerlink\" title=\"4. 优化并发控制\"></a>4. <strong>优化并发控制</strong></h3><p>使用 <code>SELECT FOR UPDATE</code> 可以提供细粒度的并发控制，通过只锁定必要的行，而不是整个表，从而提高系统的并发性能和资源利用率。</p>\n<h3 id=\"5-简化编程模型\"><a href=\"#5-简化编程模型\" class=\"headerlink\" title=\"5. 简化编程模型\"></a>5. <strong>简化编程模型</strong></h3><p><code>SELECT FOR UPDATE</code> 可以简化开发人员的编程模型，不需要手动处理复杂的锁机制，数据库会自动处理行锁定和释放，从而减少编程错误的机会。</p>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">BEGIN</span>;<br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> accounts <span class=\"hljs-keyword\">WHERE</span> account_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span>;<br><span class=\"hljs-comment\">-- 执行一些需要锁定这行的操作，例如更新账户余额</span><br><span class=\"hljs-keyword\">UPDATE</span> accounts <span class=\"hljs-keyword\">SET</span> balance <span class=\"hljs-operator\">=</span> balance <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-keyword\">WHERE</span> account_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">COMMIT</span>;<br></code></pre></td></tr></table></figure>\n\n<p>在这个示例中，通过 <code>SELECT FOR UPDATE</code> 锁定 <code>account_id = 1</code> 的行，确保在事务提交之前，没有其他事务可以修改该行。</p>\n<p>总的来说，<code>SELECT FOR UPDATE</code> 提供了一种强大的并发控制机制，帮助确保数据的完整性、一致性，并防止并发修改导致的问题。</p>\n","excerpt":"","more":"<p><code>SELECT FOR UPDATE</code> 是一种用于数据库管理系统（DBMS）的 SQL 语句，主要用于在事务处理过程中锁定选定的行，防止其他事务修改这些行，直到当前事务完成。这种机制在处理并发访问时尤其有用，以下是其具体好处：</p>\n<h3 id=\"1-避免脏读、不可重复读和幻读\"><a href=\"#1-避免脏读、不可重复读和幻读\" class=\"headerlink\" title=\"1. 避免脏读、不可重复读和幻读\"></a>1. <strong>避免脏读、不可重复读和幻读</strong></h3><p>通过使用 <code>SELECT FOR UPDATE</code>，可以锁定选定的行，确保其他事务无法对这些行进行修改，从而防止以下类型的并发问题：</p>\n<ul>\n<li><strong>脏读</strong>：一个事务可以读取到另一个未提交事务的修改。</li>\n<li><strong>不可重复读</strong>：一个事务在两次读取之间，另一个事务修改了数据，导致两次读取结果不同。</li>\n<li><strong>幻读</strong>：一个事务在两次读取之间，另一个事务插入了新行，导致第二次读取返回更多行。</li>\n</ul>\n<h3 id=\"2-确保一致性和完整性\"><a href=\"#2-确保一致性和完整性\" class=\"headerlink\" title=\"2. 确保一致性和完整性\"></a>2. <strong>确保一致性和完整性</strong></h3><p>在执行复杂的业务逻辑时，例如账户转账、库存更新等，使用 <code>SELECT FOR UPDATE</code> 可以确保在整个事务过程中数据的一致性和完整性。这样可以避免在事务中间其他事务对数据的修改，导致数据不一致。</p>\n<h3 id=\"3-防止丢失更新\"><a href=\"#3-防止丢失更新\" class=\"headerlink\" title=\"3. 防止丢失更新\"></a>3. <strong>防止丢失更新</strong></h3><p>当多个事务试图同时更新同一行时，<code>SELECT FOR UPDATE</code> 可以防止丢失更新问题。它确保一个事务完成后，其他事务才能继续执行更新操作，避免了两个事务的更新互相覆盖。</p>\n<h3 id=\"4-优化并发控制\"><a href=\"#4-优化并发控制\" class=\"headerlink\" title=\"4. 优化并发控制\"></a>4. <strong>优化并发控制</strong></h3><p>使用 <code>SELECT FOR UPDATE</code> 可以提供细粒度的并发控制，通过只锁定必要的行，而不是整个表，从而提高系统的并发性能和资源利用率。</p>\n<h3 id=\"5-简化编程模型\"><a href=\"#5-简化编程模型\" class=\"headerlink\" title=\"5. 简化编程模型\"></a>5. <strong>简化编程模型</strong></h3><p><code>SELECT FOR UPDATE</code> 可以简化开发人员的编程模型，不需要手动处理复杂的锁机制，数据库会自动处理行锁定和释放，从而减少编程错误的机会。</p>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">BEGIN</span>;<br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> accounts <span class=\"hljs-keyword\">WHERE</span> account_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span>;<br><span class=\"hljs-comment\">-- 执行一些需要锁定这行的操作，例如更新账户余额</span><br><span class=\"hljs-keyword\">UPDATE</span> accounts <span class=\"hljs-keyword\">SET</span> balance <span class=\"hljs-operator\">=</span> balance <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-keyword\">WHERE</span> account_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">COMMIT</span>;<br></code></pre></td></tr></table></figure>\n\n<p>在这个示例中，通过 <code>SELECT FOR UPDATE</code> 锁定 <code>account_id = 1</code> 的行，确保在事务提交之前，没有其他事务可以修改该行。</p>\n<p>总的来说，<code>SELECT FOR UPDATE</code> 提供了一种强大的并发控制机制，帮助确保数据的完整性、一致性，并防止并发修改导致的问题。</p>\n"},{"title":"在linux上使用代理","date":"2024-07-26T01:56:32.000Z","_content":"要在 Linux 命令行下使用 Clash Verge，需要按照以下步骤进行：\n\n### 1. 安装 Clash Verge\n\n首先，确保你的系统已经安装了 Clash Core。Clash Verge 是一个图形界面管理工具，而 Clash 本身是需要运行在后台的代理工具。\n\n#### 下载 Clash\n\n[mihomo-linux-amd64-v1.18.6.deb](在linux上使用代理/mihomo-linux-amd64-v1.18.6.deb)\n```bash\ndpkg -i mihomo-linux-amd64-v1.18.6.deb     \nchmod 777 mihomo-linux-amd64-v1.18.6.deb \nsudo mv mihomo-linux-amd64-v1.18.6 clash\n```\n\n### 2. 配置 Clash\n在使用 Clash Verge 之前，需要先配置 Clash 的 `config.yaml` 文件。\n\n```bash\n拷贝windows上的配置：D:\\soft\\clash-verge-1.6.2\\.config\\io.github.clash-verge-rev.clash-verge-rev/clash-verge.yaml\nwget -O /root/.config/mihomo/config.yaml 你配置好的clash-verge.yaml\n```\n### 3. 启动 Clash\n在命令行中启动 Clash：\n```bash\nnohup ./clash &\n```\nClash Verge 启动后，将打开一个本地的图形界面，你可以通过浏览器访问该界面，通常是 `http://localhost:7899` 或者其他配置文件中指定的端口。\n\n\n\n1. **创建代理配置文件**：在Kali系统的Docker配置目录下创建一个名为`/etc/systemd/system/docker.service.d/http-proxy.conf`的文件。如果该目录不存在，请先创建它。\n\n```sh\nsudo mkdir -p /etc/systemd/system/docker.service.d\nsudo nano /etc/systemd/system/docker.service.d/http-proxy.conf\n```\n\n2. **配置代理**：在`http-proxy.conf`文件中添加以下内容，将`http://127.0.0.1:7899`替换为你的代理服务器地址和端口。\n\n```ini\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:7899\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:7899\"\nEnvironment=\"NO_PROXY=localhost,127.0.0.1\"\n```\n\n3. **重新加载守护进程并重启Docker服务**：\n\n```sh\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n4. **验证代理配置**：你可以通过以下命令来验证Docker是否通过代理服务器进行连接：\n\n```sh\ndocker info\n```\n\n在输出信息中找到`HTTP Proxy`和`HTTPS Proxy`条目，检查它们是否显示了你配置的代理服务器地址。\n\n如果你需要为Docker客户端配置代理（如`docker build`命令），可以在你的shell配置文件（如`~/.bashrc`或`~/.zshrc`）中添加以下行：\n\n```sh\nexport HTTP_PROXY=\"http://your-proxy.example.com:8080\"\nexport HTTPS_PROXY=\"http://your-proxy.example.com:8080\"\nexport NO_PROXY=\"localhost,127.0.0.1\"\n```\n\n保存文件并加载新的配置：\n\n```sh\nsource ~/.bashrc  # 或者 source ~/.zshrc\n```\n\n这样，Docker客户端在运行时也会通过代理服务器进行连接。","source":"_posts/在linux上使用代理.md","raw":"---\ntitle: 在linux上使用代理\ndate: 2024-07-26 09:56:32\ntags:\n---\n要在 Linux 命令行下使用 Clash Verge，需要按照以下步骤进行：\n\n### 1. 安装 Clash Verge\n\n首先，确保你的系统已经安装了 Clash Core。Clash Verge 是一个图形界面管理工具，而 Clash 本身是需要运行在后台的代理工具。\n\n#### 下载 Clash\n\n[mihomo-linux-amd64-v1.18.6.deb](在linux上使用代理/mihomo-linux-amd64-v1.18.6.deb)\n```bash\ndpkg -i mihomo-linux-amd64-v1.18.6.deb     \nchmod 777 mihomo-linux-amd64-v1.18.6.deb \nsudo mv mihomo-linux-amd64-v1.18.6 clash\n```\n\n### 2. 配置 Clash\n在使用 Clash Verge 之前，需要先配置 Clash 的 `config.yaml` 文件。\n\n```bash\n拷贝windows上的配置：D:\\soft\\clash-verge-1.6.2\\.config\\io.github.clash-verge-rev.clash-verge-rev/clash-verge.yaml\nwget -O /root/.config/mihomo/config.yaml 你配置好的clash-verge.yaml\n```\n### 3. 启动 Clash\n在命令行中启动 Clash：\n```bash\nnohup ./clash &\n```\nClash Verge 启动后，将打开一个本地的图形界面，你可以通过浏览器访问该界面，通常是 `http://localhost:7899` 或者其他配置文件中指定的端口。\n\n\n\n1. **创建代理配置文件**：在Kali系统的Docker配置目录下创建一个名为`/etc/systemd/system/docker.service.d/http-proxy.conf`的文件。如果该目录不存在，请先创建它。\n\n```sh\nsudo mkdir -p /etc/systemd/system/docker.service.d\nsudo nano /etc/systemd/system/docker.service.d/http-proxy.conf\n```\n\n2. **配置代理**：在`http-proxy.conf`文件中添加以下内容，将`http://127.0.0.1:7899`替换为你的代理服务器地址和端口。\n\n```ini\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:7899\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:7899\"\nEnvironment=\"NO_PROXY=localhost,127.0.0.1\"\n```\n\n3. **重新加载守护进程并重启Docker服务**：\n\n```sh\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n4. **验证代理配置**：你可以通过以下命令来验证Docker是否通过代理服务器进行连接：\n\n```sh\ndocker info\n```\n\n在输出信息中找到`HTTP Proxy`和`HTTPS Proxy`条目，检查它们是否显示了你配置的代理服务器地址。\n\n如果你需要为Docker客户端配置代理（如`docker build`命令），可以在你的shell配置文件（如`~/.bashrc`或`~/.zshrc`）中添加以下行：\n\n```sh\nexport HTTP_PROXY=\"http://your-proxy.example.com:8080\"\nexport HTTPS_PROXY=\"http://your-proxy.example.com:8080\"\nexport NO_PROXY=\"localhost,127.0.0.1\"\n```\n\n保存文件并加载新的配置：\n\n```sh\nsource ~/.bashrc  # 或者 source ~/.zshrc\n```\n\n这样，Docker客户端在运行时也会通过代理服务器进行连接。","slug":"在linux上使用代理","published":1,"updated":"2024-07-26T02:13:07.057Z","_id":"clz226zqt0000mcjdddb70zak","comments":1,"layout":"post","photos":[],"content":"<p>要在 Linux 命令行下使用 Clash Verge，需要按照以下步骤进行：</p>\n<h3 id=\"1-安装-Clash-Verge\"><a href=\"#1-安装-Clash-Verge\" class=\"headerlink\" title=\"1. 安装 Clash Verge\"></a>1. 安装 Clash Verge</h3><p>首先，确保你的系统已经安装了 Clash Core。Clash Verge 是一个图形界面管理工具，而 Clash 本身是需要运行在后台的代理工具。</p>\n<h4 id=\"下载-Clash\"><a href=\"#下载-Clash\" class=\"headerlink\" title=\"下载 Clash\"></a>下载 Clash</h4><p><a href=\"%E5%9C%A8linux%E4%B8%8A%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/mihomo-linux-amd64-v1.18.6.deb\">mihomo-linux-amd64-v1.18.6.deb</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">dpkg -i mihomo-linux-amd64-v1.18.6.deb     <br><span class=\"hljs-built_in\">chmod</span> 777 mihomo-linux-amd64-v1.18.6.deb <br>sudo <span class=\"hljs-built_in\">mv</span> mihomo-linux-amd64-v1.18.6 clash<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置-Clash\"><a href=\"#2-配置-Clash\" class=\"headerlink\" title=\"2. 配置 Clash\"></a>2. 配置 Clash</h3><p>在使用 Clash Verge 之前，需要先配置 Clash 的 <code>config.yaml</code> 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">拷贝windows上的配置：D:\\soft\\clash-verge-1.6.2\\.config\\io.github.clash-verge-rev.clash-verge-rev/clash-verge.yaml<br>wget -O /root/.config/mihomo/config.yaml 你配置好的clash-verge.yaml<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-启动-Clash\"><a href=\"#3-启动-Clash\" class=\"headerlink\" title=\"3. 启动 Clash\"></a>3. 启动 Clash</h3><p>在命令行中启动 Clash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">nohup</span> ./clash &amp;<br></code></pre></td></tr></table></figure>\n<p>Clash Verge 启动后，将打开一个本地的图形界面，你可以通过浏览器访问该界面，通常是 <code>http://localhost:7899</code> 或者其他配置文件中指定的端口。</p>\n<ol>\n<li><strong>创建代理配置文件</strong>：在Kali系统的Docker配置目录下创建一个名为<code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>的文件。如果该目录不存在，请先创建它。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">mkdir</span> -p /etc/systemd/system/docker.service.d<br>sudo nano /etc/systemd/system/docker.service.d/http-proxy.conf<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>配置代理</strong>：在<code>http-proxy.conf</code>文件中添加以下内容，将<code>http://127.0.0.1:7899</code>替换为你的代理服务器地址和端口。</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Service]</span><br><span class=\"hljs-attr\">Environment</span>=<span class=\"hljs-string\">&quot;HTTP_PROXY=http://127.0.0.1:7899&quot;</span><br><span class=\"hljs-attr\">Environment</span>=<span class=\"hljs-string\">&quot;HTTPS_PROXY=http://127.0.0.1:7899&quot;</span><br><span class=\"hljs-attr\">Environment</span>=<span class=\"hljs-string\">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>重新加载守护进程并重启Docker服务</strong>：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>验证代理配置</strong>：你可以通过以下命令来验证Docker是否通过代理服务器进行连接：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker info<br></code></pre></td></tr></table></figure>\n\n<p>在输出信息中找到<code>HTTP Proxy</code>和<code>HTTPS Proxy</code>条目，检查它们是否显示了你配置的代理服务器地址。</p>\n<p>如果你需要为Docker客户端配置代理（如<code>docker build</code>命令），可以在你的shell配置文件（如<code>~/.bashrc</code>或<code>~/.zshrc</code>）中添加以下行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">&quot;http://your-proxy.example.com:8080&quot;</span><br><span class=\"hljs-built_in\">export</span> HTTPS_PROXY=<span class=\"hljs-string\">&quot;http://your-proxy.example.com:8080&quot;</span><br><span class=\"hljs-built_in\">export</span> NO_PROXY=<span class=\"hljs-string\">&quot;localhost,127.0.0.1&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>保存文件并加载新的配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc  <span class=\"hljs-comment\"># 或者 source ~/.zshrc</span><br></code></pre></td></tr></table></figure>\n\n<p>这样，Docker客户端在运行时也会通过代理服务器进行连接。</p>\n","excerpt":"","more":"<p>要在 Linux 命令行下使用 Clash Verge，需要按照以下步骤进行：</p>\n<h3 id=\"1-安装-Clash-Verge\"><a href=\"#1-安装-Clash-Verge\" class=\"headerlink\" title=\"1. 安装 Clash Verge\"></a>1. 安装 Clash Verge</h3><p>首先，确保你的系统已经安装了 Clash Core。Clash Verge 是一个图形界面管理工具，而 Clash 本身是需要运行在后台的代理工具。</p>\n<h4 id=\"下载-Clash\"><a href=\"#下载-Clash\" class=\"headerlink\" title=\"下载 Clash\"></a>下载 Clash</h4><p><a href=\"%E5%9C%A8linux%E4%B8%8A%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/mihomo-linux-amd64-v1.18.6.deb\">mihomo-linux-amd64-v1.18.6.deb</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">dpkg -i mihomo-linux-amd64-v1.18.6.deb     <br><span class=\"hljs-built_in\">chmod</span> 777 mihomo-linux-amd64-v1.18.6.deb <br>sudo <span class=\"hljs-built_in\">mv</span> mihomo-linux-amd64-v1.18.6 clash<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置-Clash\"><a href=\"#2-配置-Clash\" class=\"headerlink\" title=\"2. 配置 Clash\"></a>2. 配置 Clash</h3><p>在使用 Clash Verge 之前，需要先配置 Clash 的 <code>config.yaml</code> 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">拷贝windows上的配置：D:\\soft\\clash-verge-1.6.2\\.config\\io.github.clash-verge-rev.clash-verge-rev/clash-verge.yaml<br>wget -O /root/.config/mihomo/config.yaml 你配置好的clash-verge.yaml<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-启动-Clash\"><a href=\"#3-启动-Clash\" class=\"headerlink\" title=\"3. 启动 Clash\"></a>3. 启动 Clash</h3><p>在命令行中启动 Clash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">nohup</span> ./clash &amp;<br></code></pre></td></tr></table></figure>\n<p>Clash Verge 启动后，将打开一个本地的图形界面，你可以通过浏览器访问该界面，通常是 <code>http://localhost:7899</code> 或者其他配置文件中指定的端口。</p>\n<ol>\n<li><strong>创建代理配置文件</strong>：在Kali系统的Docker配置目录下创建一个名为<code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>的文件。如果该目录不存在，请先创建它。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">mkdir</span> -p /etc/systemd/system/docker.service.d<br>sudo nano /etc/systemd/system/docker.service.d/http-proxy.conf<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>配置代理</strong>：在<code>http-proxy.conf</code>文件中添加以下内容，将<code>http://127.0.0.1:7899</code>替换为你的代理服务器地址和端口。</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Service]</span><br><span class=\"hljs-attr\">Environment</span>=<span class=\"hljs-string\">&quot;HTTP_PROXY=http://127.0.0.1:7899&quot;</span><br><span class=\"hljs-attr\">Environment</span>=<span class=\"hljs-string\">&quot;HTTPS_PROXY=http://127.0.0.1:7899&quot;</span><br><span class=\"hljs-attr\">Environment</span>=<span class=\"hljs-string\">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>重新加载守护进程并重启Docker服务</strong>：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>验证代理配置</strong>：你可以通过以下命令来验证Docker是否通过代理服务器进行连接：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker info<br></code></pre></td></tr></table></figure>\n\n<p>在输出信息中找到<code>HTTP Proxy</code>和<code>HTTPS Proxy</code>条目，检查它们是否显示了你配置的代理服务器地址。</p>\n<p>如果你需要为Docker客户端配置代理（如<code>docker build</code>命令），可以在你的shell配置文件（如<code>~/.bashrc</code>或<code>~/.zshrc</code>）中添加以下行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">&quot;http://your-proxy.example.com:8080&quot;</span><br><span class=\"hljs-built_in\">export</span> HTTPS_PROXY=<span class=\"hljs-string\">&quot;http://your-proxy.example.com:8080&quot;</span><br><span class=\"hljs-built_in\">export</span> NO_PROXY=<span class=\"hljs-string\">&quot;localhost,127.0.0.1&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>保存文件并加载新的配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc  <span class=\"hljs-comment\"># 或者 source ~/.zshrc</span><br></code></pre></td></tr></table></figure>\n\n<p>这样，Docker客户端在运行时也会通过代理服务器进行连接。</p>\n"},{"title":"使用切面或拦截器打印异常日志","date":"2024-07-26T09:01:47.000Z","_content":"在Spring Boot中，使用切面（Aspect）或拦截器（Interceptor）来捕获异常并记录日志是一种常见的做法。下面介绍如何使用这两种方式来实现。\n\n### 1. 使用切面（Aspect）记录异常日志\n\nSpring AOP（Aspect-Oriented Programming）允许你定义横切关注点，比如日志记录、事务管理等。可以通过编写一个切面来捕获所有方法中的异常并记录日志。\n\n#### 步骤：\n\n1. **添加依赖**：\n   确保你的项目中包含Spring AOP相关依赖。如果你使用的是Maven，确保`spring-boot-starter-aop`已经在你的`pom.xml`中。\n\n    ```xml\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-aop</artifactId>\n    </dependency>\n    ```\n\n2. **创建切面类**：\n\n    ```java\n    import org.aspectj.lang.annotation.AfterThrowing;\n    import org.aspectj.lang.annotation.Aspect;\n    import org.springframework.stereotype.Component;\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n\n    @Aspect\n    @Component\n    public class ExceptionLoggingAspect {\n\n        private static final Logger logger = LoggerFactory.getLogger(ExceptionLoggingAspect.class);\n\n        // 定义一个切入点，拦截所有方法\n        @AfterThrowing(pointcut = \"execution(* com.yourpackage..*(..))\", throwing = \"exception\")\n        public void logException(Exception exception) {\n            logger.error(\"Exception caught: \", exception);\n        }\n    }\n    ```\n\n   在上述代码中，`@AfterThrowing`注解用于定义在方法抛出异常后执行的通知。`execution(* com.yourpackage..*(..))`表示拦截`com.yourpackage`包及其子包中所有类的所有方法。\n\n### 2. 使用拦截器（Interceptor）记录异常日志\n\nSpring中的拦截器允许你在HTTP请求处理的各个阶段执行一些操作，可以用来记录异常日志。\n\n#### 步骤：\n\n1. **创建拦截器类**：\n\n    ```java\n    import org.springframework.stereotype.Component;\n    import org.springframework.web.servlet.HandlerInterceptor;\n    import org.springframework.web.servlet.ModelAndView;\n\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n\n    @Component\n    public class ExceptionLoggingInterceptor implements HandlerInterceptor {\n\n        @Override\n        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n            return true;\n        }\n\n        @Override\n        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        }\n\n        @Override\n        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n            if (ex != null) {\n                // 记录异常日志\n                Logger logger = LoggerFactory.getLogger(handler.getClass());\n                logger.error(\"Exception caught during request processing: \", ex);\n            }\n        }\n    }\n    ```\n\n2. **注册拦截器**：\n\n   在Spring Boot应用中，通过配置类注册拦截器。\n\n    ```java\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n    import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n    @Configuration\n    public class WebConfig implements WebMvcConfigurer {\n\n        @Autowired\n        private ExceptionLoggingInterceptor exceptionLoggingInterceptor;\n\n        @Override\n        public void addInterceptors(InterceptorRegistry registry) {\n            registry.addInterceptor(exceptionLoggingInterceptor);\n        }\n    }\n    ```\n\n### 总结\n\n这两种方式各有优劣：\n\n- **切面（Aspect）**适用于需要在方法级别捕获异常的情况，可以轻松应用于所有方法。\n- **拦截器（Interceptor）**适用于需要在请求级别捕获异常的情况，更适合Web应用程序中的HTTP请求处理。\n\n选择哪种方式取决于你的具体需求。如果你希望对所有方法的异常进行统一处理，切面可能更合适；如果你需要对HTTP请求处理的异常进行统一处理，拦截器则更为合适。","source":"_posts/使用切面或拦截器打印异常日志.md","raw":"---\ntitle: 使用切面或拦截器打印异常日志\ndate: 2024-07-26 17:01:47\ntags:\n---\n在Spring Boot中，使用切面（Aspect）或拦截器（Interceptor）来捕获异常并记录日志是一种常见的做法。下面介绍如何使用这两种方式来实现。\n\n### 1. 使用切面（Aspect）记录异常日志\n\nSpring AOP（Aspect-Oriented Programming）允许你定义横切关注点，比如日志记录、事务管理等。可以通过编写一个切面来捕获所有方法中的异常并记录日志。\n\n#### 步骤：\n\n1. **添加依赖**：\n   确保你的项目中包含Spring AOP相关依赖。如果你使用的是Maven，确保`spring-boot-starter-aop`已经在你的`pom.xml`中。\n\n    ```xml\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-aop</artifactId>\n    </dependency>\n    ```\n\n2. **创建切面类**：\n\n    ```java\n    import org.aspectj.lang.annotation.AfterThrowing;\n    import org.aspectj.lang.annotation.Aspect;\n    import org.springframework.stereotype.Component;\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n\n    @Aspect\n    @Component\n    public class ExceptionLoggingAspect {\n\n        private static final Logger logger = LoggerFactory.getLogger(ExceptionLoggingAspect.class);\n\n        // 定义一个切入点，拦截所有方法\n        @AfterThrowing(pointcut = \"execution(* com.yourpackage..*(..))\", throwing = \"exception\")\n        public void logException(Exception exception) {\n            logger.error(\"Exception caught: \", exception);\n        }\n    }\n    ```\n\n   在上述代码中，`@AfterThrowing`注解用于定义在方法抛出异常后执行的通知。`execution(* com.yourpackage..*(..))`表示拦截`com.yourpackage`包及其子包中所有类的所有方法。\n\n### 2. 使用拦截器（Interceptor）记录异常日志\n\nSpring中的拦截器允许你在HTTP请求处理的各个阶段执行一些操作，可以用来记录异常日志。\n\n#### 步骤：\n\n1. **创建拦截器类**：\n\n    ```java\n    import org.springframework.stereotype.Component;\n    import org.springframework.web.servlet.HandlerInterceptor;\n    import org.springframework.web.servlet.ModelAndView;\n\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n\n    @Component\n    public class ExceptionLoggingInterceptor implements HandlerInterceptor {\n\n        @Override\n        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n            return true;\n        }\n\n        @Override\n        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        }\n\n        @Override\n        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n            if (ex != null) {\n                // 记录异常日志\n                Logger logger = LoggerFactory.getLogger(handler.getClass());\n                logger.error(\"Exception caught during request processing: \", ex);\n            }\n        }\n    }\n    ```\n\n2. **注册拦截器**：\n\n   在Spring Boot应用中，通过配置类注册拦截器。\n\n    ```java\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n    import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n    @Configuration\n    public class WebConfig implements WebMvcConfigurer {\n\n        @Autowired\n        private ExceptionLoggingInterceptor exceptionLoggingInterceptor;\n\n        @Override\n        public void addInterceptors(InterceptorRegistry registry) {\n            registry.addInterceptor(exceptionLoggingInterceptor);\n        }\n    }\n    ```\n\n### 总结\n\n这两种方式各有优劣：\n\n- **切面（Aspect）**适用于需要在方法级别捕获异常的情况，可以轻松应用于所有方法。\n- **拦截器（Interceptor）**适用于需要在请求级别捕获异常的情况，更适合Web应用程序中的HTTP请求处理。\n\n选择哪种方式取决于你的具体需求。如果你希望对所有方法的异常进行统一处理，切面可能更合适；如果你需要对HTTP请求处理的异常进行统一处理，拦截器则更为合适。","slug":"使用切面或拦截器打印异常日志","published":1,"updated":"2024-07-26T09:01:59.753Z","comments":1,"layout":"post","photos":[],"_id":"clz2h4juv000000jddkizd7kv","content":"<p>在Spring Boot中，使用切面（Aspect）或拦截器（Interceptor）来捕获异常并记录日志是一种常见的做法。下面介绍如何使用这两种方式来实现。</p>\n<h3 id=\"1-使用切面（Aspect）记录异常日志\"><a href=\"#1-使用切面（Aspect）记录异常日志\" class=\"headerlink\" title=\"1. 使用切面（Aspect）记录异常日志\"></a>1. 使用切面（Aspect）记录异常日志</h3><p>Spring AOP（Aspect-Oriented Programming）允许你定义横切关注点，比如日志记录、事务管理等。可以通过编写一个切面来捕获所有方法中的异常并记录日志。</p>\n<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>添加依赖</strong>：<br>确保你的项目中包含Spring AOP相关依赖。如果你使用的是Maven，确保<code>spring-boot-starter-aop</code>已经在你的<code>pom.xml</code>中。</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建切面类</strong>：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionLoggingAspect</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">logger</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(ExceptionLoggingAspect.class);<br><br>    <span class=\"hljs-comment\">// 定义一个切入点，拦截所有方法</span><br>    <span class=\"hljs-meta\">@AfterThrowing(pointcut = &quot;execution(* com.yourpackage..*(..))&quot;, throwing = &quot;exception&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">logException</span><span class=\"hljs-params\">(Exception exception)</span> &#123;<br>        logger.error(<span class=\"hljs-string\">&quot;Exception caught: &quot;</span>, exception);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在上述代码中，<code>@AfterThrowing</code>注解用于定义在方法抛出异常后执行的通知。<code>execution(* com.yourpackage..*(..))</code>表示拦截<code>com.yourpackage</code>包及其子包中所有类的所有方法。</p>\n</li>\n</ol>\n<h3 id=\"2-使用拦截器（Interceptor）记录异常日志\"><a href=\"#2-使用拦截器（Interceptor）记录异常日志\" class=\"headerlink\" title=\"2. 使用拦截器（Interceptor）记录异常日志\"></a>2. 使用拦截器（Interceptor）记录异常日志</h3><p>Spring中的拦截器允许你在HTTP请求处理的各个阶段执行一些操作，可以用来记录异常日志。</p>\n<h4 id=\"步骤：-1\"><a href=\"#步骤：-1\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>创建拦截器类</strong>：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionLoggingInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCompletion</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">if</span> (ex != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 记录异常日志</span><br>            <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">logger</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(handler.getClass());<br>            logger.error(<span class=\"hljs-string\">&quot;Exception caught during request processing: &quot;</span>, ex);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>注册拦截器</strong>：</p>\n<p>在Spring Boot应用中，通过配置类注册拦截器。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> ExceptionLoggingInterceptor exceptionLoggingInterceptor;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(exceptionLoggingInterceptor);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这两种方式各有优劣：</p>\n<ul>\n<li><strong>切面（Aspect）</strong>适用于需要在方法级别捕获异常的情况，可以轻松应用于所有方法。</li>\n<li><strong>拦截器（Interceptor）</strong>适用于需要在请求级别捕获异常的情况，更适合Web应用程序中的HTTP请求处理。</li>\n</ul>\n<p>选择哪种方式取决于你的具体需求。如果你希望对所有方法的异常进行统一处理，切面可能更合适；如果你需要对HTTP请求处理的异常进行统一处理，拦截器则更为合适。</p>\n","excerpt":"","more":"<p>在Spring Boot中，使用切面（Aspect）或拦截器（Interceptor）来捕获异常并记录日志是一种常见的做法。下面介绍如何使用这两种方式来实现。</p>\n<h3 id=\"1-使用切面（Aspect）记录异常日志\"><a href=\"#1-使用切面（Aspect）记录异常日志\" class=\"headerlink\" title=\"1. 使用切面（Aspect）记录异常日志\"></a>1. 使用切面（Aspect）记录异常日志</h3><p>Spring AOP（Aspect-Oriented Programming）允许你定义横切关注点，比如日志记录、事务管理等。可以通过编写一个切面来捕获所有方法中的异常并记录日志。</p>\n<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>添加依赖</strong>：<br>确保你的项目中包含Spring AOP相关依赖。如果你使用的是Maven，确保<code>spring-boot-starter-aop</code>已经在你的<code>pom.xml</code>中。</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建切面类</strong>：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionLoggingAspect</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">logger</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(ExceptionLoggingAspect.class);<br><br>    <span class=\"hljs-comment\">// 定义一个切入点，拦截所有方法</span><br>    <span class=\"hljs-meta\">@AfterThrowing(pointcut = &quot;execution(* com.yourpackage..*(..))&quot;, throwing = &quot;exception&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">logException</span><span class=\"hljs-params\">(Exception exception)</span> &#123;<br>        logger.error(<span class=\"hljs-string\">&quot;Exception caught: &quot;</span>, exception);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在上述代码中，<code>@AfterThrowing</code>注解用于定义在方法抛出异常后执行的通知。<code>execution(* com.yourpackage..*(..))</code>表示拦截<code>com.yourpackage</code>包及其子包中所有类的所有方法。</p>\n</li>\n</ol>\n<h3 id=\"2-使用拦截器（Interceptor）记录异常日志\"><a href=\"#2-使用拦截器（Interceptor）记录异常日志\" class=\"headerlink\" title=\"2. 使用拦截器（Interceptor）记录异常日志\"></a>2. 使用拦截器（Interceptor）记录异常日志</h3><p>Spring中的拦截器允许你在HTTP请求处理的各个阶段执行一些操作，可以用来记录异常日志。</p>\n<h4 id=\"步骤：-1\"><a href=\"#步骤：-1\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li><p><strong>创建拦截器类</strong>：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionLoggingInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCompletion</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">if</span> (ex != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 记录异常日志</span><br>            <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">logger</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(handler.getClass());<br>            logger.error(<span class=\"hljs-string\">&quot;Exception caught during request processing: &quot;</span>, ex);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>注册拦截器</strong>：</p>\n<p>在Spring Boot应用中，通过配置类注册拦截器。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> ExceptionLoggingInterceptor exceptionLoggingInterceptor;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(exceptionLoggingInterceptor);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这两种方式各有优劣：</p>\n<ul>\n<li><strong>切面（Aspect）</strong>适用于需要在方法级别捕获异常的情况，可以轻松应用于所有方法。</li>\n<li><strong>拦截器（Interceptor）</strong>适用于需要在请求级别捕获异常的情况，更适合Web应用程序中的HTTP请求处理。</li>\n</ul>\n<p>选择哪种方式取决于你的具体需求。如果你希望对所有方法的异常进行统一处理，切面可能更合适；如果你需要对HTTP请求处理的异常进行统一处理，拦截器则更为合适。</p>\n"},{"title":"解读redis分布式锁核心逻辑","date":"2024-07-30T02:07:27.000Z","_content":"   ```lua\n  local insertable = false; local value = redis.call('hget', KEYS[1], ARGV[5]); if value == false then insertable = true; else local t, val = struct.unpack('dLc0', value); local expireDate = 92233720368547758; local expireDateScore = redis.call('zscore', KEYS[2], ARGV[5]); if expireDateScore ~= false then expireDate = tonumber(expireDateScore) end; if t ~= 0 then local expireIdle = redis.call('zscore', KEYS[3], ARGV[5]); if expireIdle ~= false then expireDate = math.min(expireDate, tonumber(expireIdle)) end; end; if expireDate <= tonumber(ARGV[1]) then insertable = true; end; end; if insertable == true then if tonumber(ARGV[2]) > 0 then redis.call('zadd', KEYS[2], ARGV[2], ARGV[5]); else redis.call('zrem', KEYS[2], ARGV[5]); end; if tonumber(ARGV[3]) > 0 then redis.call('zadd', KEYS[3], ARGV[3], ARGV[5]); else redis.call('zrem', KEYS[3], ARGV[5]); end; local maxSize = tonumber(redis.call('hget', KEYS[7], 'max-size')); if maxSize ~= nil and maxSize ~= 0 then     local currentTime = tonumber(ARGV[1]);     local lastAccessTimeSetName = KEYS[5]; local mode = redis.call('hget', KEYS[7], 'mode'); if mode == false or mode == 'LRU' then redis.call('zadd', lastAccessTimeSetName, currentTime, ARGV[5]); end;     local cacheSize = tonumber(redis.call('hlen', KEYS[1]));     if cacheSize >= maxSize then         local lruItems = redis.call('zrange', lastAccessTimeSetName, 0, cacheSize - maxSize);         for index, lruItem in ipairs(lruItems) do             if lruItem and lruItem ~= ARGV[5] then                 local lruItemValue = redis.call('hget', KEYS[1], lruItem);                 redis.call('hdel', KEYS[1], lruItem);                 redis.call('zrem', KEYS[2], lruItem);                 redis.call('zrem', KEYS[3], lruItem);                 redis.call('zrem', lastAccessTimeSetName, lruItem);                 if lruItemValue ~= false then                 local removedChannelName = KEYS[6]; local ttl, obj = struct.unpack('dLc0', lruItemValue);                    local msg = struct.pack('Lc0Lc0', string.len(lruItem), lruItem, string.len(obj), obj);                redis.call('publish', removedChannelName, msg); end;             end;         end;     end; if mode == 'LFU' then redis.call('zincrby', lastAccessTimeSetName, 1, ARGV[5]); end; end; local val = struct.pack('dLc0', tonumber(ARGV[4]), string.len(ARGV[6]), ARGV[6]); redis.call('hset', KEYS[1], ARGV[5], val); local msg = struct.pack('Lc0Lc0', string.len(ARGV[5]), ARGV[5], string.len(ARGV[6]), ARGV[6]); redis.call('publish', KEYS[4], msg); return nil; else local t, val = struct.unpack('dLc0', value); redis.call('zadd', KEYS[3], t + ARGV[1], ARGV[5]); return val; end; \n   ```\n\n这段Lua脚本用于Redis缓存的管理和插入操作，主要功能包括：\n- 判断是否需要插入或更新缓存。\n- 处理缓存的过期逻辑。\n- 实现基于LRU（最近最少使用）或LFU（最少使用频率）策略的缓存淘汰。\n- 在缓存项插入或更新时发布相关消息。\n\n具体的解读如下：\n\n1. **初始化和获取当前值**：\n   ```lua\n   local insertable = false\n   local value = redis.call('hget', KEYS[1], ARGV[5])\n   ```\n\n2. **判断当前缓存项是否存在**：\n    - 如果不存在，则设置`insertable`为`true`，表示可以插入新的缓存项。\n    - 如果存在，继续判断其过期时间。\n   ```lua\n   if value == false then \n       insertable = true \n   else\n       local t, val = struct.unpack('dLc0', value)\n       local expireDate = 92233720368547758\n       local expireDateScore = redis.call('zscore', KEYS[2], ARGV[5])\n       if expireDateScore ~= false then expireDate = tonumber(expireDateScore) end\n       if t ~= 0 then\n           local expireIdle = redis.call('zscore', KEYS[3], ARGV[5])\n           if expireIdle ~= false then expireDate = math.min(expireDate, tonumber(expireIdle)) end\n       end\n       if expireDate <= tonumber(ARGV[1]) then insertable = true end\n   end\n   ```\n\n3. **处理可插入的情况**：\n    - 更新或删除过期时间。\n    - 检查缓存大小，并根据LRU或LFU策略进行淘汰。\n   ```lua\n   if insertable == true then \n       if tonumber(ARGV[2]) > 0 then \n           redis.call('zadd', KEYS[2], ARGV[2], ARGV[5])\n       else \n           redis.call('zrem', KEYS[2], ARGV[5]) \n       end\n       if tonumber(ARGV[3]) > 0 then \n           redis.call('zadd', KEYS[3], ARGV[3], ARGV[5])\n       else \n           redis.call('zrem', KEYS[3], ARGV[5]) \n       end\n       local maxSize = tonumber(redis.call('hget', KEYS[7], 'max-size'))\n       if maxSize ~= nil and maxSize ~= 0 then\n           local currentTime = tonumber(ARGV[1])\n           local lastAccessTimeSetName = KEYS[5]\n           local mode = redis.call('hget', KEYS[7], 'mode')\n           if mode == false or mode == 'LRU' then \n               redis.call('zadd', lastAccessTimeSetName, currentTime, ARGV[5])\n           end\n           local cacheSize = tonumber(redis.call('hlen', KEYS[1]))\n           if cacheSize >= maxSize then\n               local lruItems = redis.call('zrange', lastAccessTimeSetName, 0, cacheSize - maxSize)\n               for index, lruItem in ipairs(lruItems) do\n                   if lruItem and lruItem ~= ARGV[5] then\n                       local lruItemValue = redis.call('hget', KEYS[1], lruItem)\n                       redis.call('hdel', KEYS[1], lruItem)\n                       redis.call('zrem', KEYS[2], lruItem)\n                       redis.call('zrem', KEYS[3], lruItem)\n                       redis.call('zrem', lastAccessTimeSetName, lruItem)\n                       if lruItemValue ~= false then\n                           local removedChannelName = KEYS[6]\n                           local ttl, obj = struct.unpack('dLc0', lruItemValue)\n                           local msg = struct.pack('Lc0Lc0', string.len(lruItem), lruItem, string.len(obj), obj)\n                           redis.call('publish', removedChannelName, msg)\n                       end\n                   end\n               end\n           end\n           if mode == 'LFU' then \n               redis.call('zincrby', lastAccessTimeSetName, 1, ARGV[5]) \n           end\n       end\n       local val = struct.pack('dLc0', tonumber(ARGV[4]), string.len(ARGV[6]), ARGV[6])\n       redis.call('hset', KEYS[1], ARGV[5], val)\n       local msg = struct.pack('Lc0Lc0', string.len(ARGV[5]), ARGV[5], string.len(ARGV[6]), ARGV[6])\n       redis.call('publish', KEYS[4], msg)\n       return nil\n   ```\n\n4. **处理不可插入的情况**：\n    - 更新过期时间，并返回现有值。\n   ```lua\n   else \n       local t, val = struct.unpack('dLc0', value)\n       redis.call('zadd', KEYS[3], t + ARGV[1], ARGV[5])\n       return val\n   end\n   ```\n\n### 参数和键值解释\n\n- `KEYS[1]`: 哈希表存储缓存项。\n- `KEYS[2]`: 有序集合存储过期时间。\n- `KEYS[3]`: 有序集合存储空闲时间。\n- `KEYS[4]`: 频道名称，用于发布缓存项变更消息。\n- `KEYS[5]`: 有序集合存储最近访问时间（LRU模式）。\n- `KEYS[6]`: 频道名称，用于发布被淘汰的缓存项。\n- `KEYS[7]`: 存储缓存配置（如最大尺寸、模式等）。\n\n- `ARGV[1]`: 当前时间戳。\n- `ARGV[2]`: 新的过期时间。\n- `ARGV[3]`: 新的空闲时间。\n- `ARGV[4]`: 新缓存项的TTL。\n- `ARGV[5]`: 缓存项的键名。\n- `ARGV[6]`: 缓存项的值。","source":"_posts/解读redis分布式锁核心逻辑.md","raw":"---\ntitle: 解读redis分布式锁核心逻辑\ndate: 2024-07-30 10:07:27\ntags:\n---\n   ```lua\n  local insertable = false; local value = redis.call('hget', KEYS[1], ARGV[5]); if value == false then insertable = true; else local t, val = struct.unpack('dLc0', value); local expireDate = 92233720368547758; local expireDateScore = redis.call('zscore', KEYS[2], ARGV[5]); if expireDateScore ~= false then expireDate = tonumber(expireDateScore) end; if t ~= 0 then local expireIdle = redis.call('zscore', KEYS[3], ARGV[5]); if expireIdle ~= false then expireDate = math.min(expireDate, tonumber(expireIdle)) end; end; if expireDate <= tonumber(ARGV[1]) then insertable = true; end; end; if insertable == true then if tonumber(ARGV[2]) > 0 then redis.call('zadd', KEYS[2], ARGV[2], ARGV[5]); else redis.call('zrem', KEYS[2], ARGV[5]); end; if tonumber(ARGV[3]) > 0 then redis.call('zadd', KEYS[3], ARGV[3], ARGV[5]); else redis.call('zrem', KEYS[3], ARGV[5]); end; local maxSize = tonumber(redis.call('hget', KEYS[7], 'max-size')); if maxSize ~= nil and maxSize ~= 0 then     local currentTime = tonumber(ARGV[1]);     local lastAccessTimeSetName = KEYS[5]; local mode = redis.call('hget', KEYS[7], 'mode'); if mode == false or mode == 'LRU' then redis.call('zadd', lastAccessTimeSetName, currentTime, ARGV[5]); end;     local cacheSize = tonumber(redis.call('hlen', KEYS[1]));     if cacheSize >= maxSize then         local lruItems = redis.call('zrange', lastAccessTimeSetName, 0, cacheSize - maxSize);         for index, lruItem in ipairs(lruItems) do             if lruItem and lruItem ~= ARGV[5] then                 local lruItemValue = redis.call('hget', KEYS[1], lruItem);                 redis.call('hdel', KEYS[1], lruItem);                 redis.call('zrem', KEYS[2], lruItem);                 redis.call('zrem', KEYS[3], lruItem);                 redis.call('zrem', lastAccessTimeSetName, lruItem);                 if lruItemValue ~= false then                 local removedChannelName = KEYS[6]; local ttl, obj = struct.unpack('dLc0', lruItemValue);                    local msg = struct.pack('Lc0Lc0', string.len(lruItem), lruItem, string.len(obj), obj);                redis.call('publish', removedChannelName, msg); end;             end;         end;     end; if mode == 'LFU' then redis.call('zincrby', lastAccessTimeSetName, 1, ARGV[5]); end; end; local val = struct.pack('dLc0', tonumber(ARGV[4]), string.len(ARGV[6]), ARGV[6]); redis.call('hset', KEYS[1], ARGV[5], val); local msg = struct.pack('Lc0Lc0', string.len(ARGV[5]), ARGV[5], string.len(ARGV[6]), ARGV[6]); redis.call('publish', KEYS[4], msg); return nil; else local t, val = struct.unpack('dLc0', value); redis.call('zadd', KEYS[3], t + ARGV[1], ARGV[5]); return val; end; \n   ```\n\n这段Lua脚本用于Redis缓存的管理和插入操作，主要功能包括：\n- 判断是否需要插入或更新缓存。\n- 处理缓存的过期逻辑。\n- 实现基于LRU（最近最少使用）或LFU（最少使用频率）策略的缓存淘汰。\n- 在缓存项插入或更新时发布相关消息。\n\n具体的解读如下：\n\n1. **初始化和获取当前值**：\n   ```lua\n   local insertable = false\n   local value = redis.call('hget', KEYS[1], ARGV[5])\n   ```\n\n2. **判断当前缓存项是否存在**：\n    - 如果不存在，则设置`insertable`为`true`，表示可以插入新的缓存项。\n    - 如果存在，继续判断其过期时间。\n   ```lua\n   if value == false then \n       insertable = true \n   else\n       local t, val = struct.unpack('dLc0', value)\n       local expireDate = 92233720368547758\n       local expireDateScore = redis.call('zscore', KEYS[2], ARGV[5])\n       if expireDateScore ~= false then expireDate = tonumber(expireDateScore) end\n       if t ~= 0 then\n           local expireIdle = redis.call('zscore', KEYS[3], ARGV[5])\n           if expireIdle ~= false then expireDate = math.min(expireDate, tonumber(expireIdle)) end\n       end\n       if expireDate <= tonumber(ARGV[1]) then insertable = true end\n   end\n   ```\n\n3. **处理可插入的情况**：\n    - 更新或删除过期时间。\n    - 检查缓存大小，并根据LRU或LFU策略进行淘汰。\n   ```lua\n   if insertable == true then \n       if tonumber(ARGV[2]) > 0 then \n           redis.call('zadd', KEYS[2], ARGV[2], ARGV[5])\n       else \n           redis.call('zrem', KEYS[2], ARGV[5]) \n       end\n       if tonumber(ARGV[3]) > 0 then \n           redis.call('zadd', KEYS[3], ARGV[3], ARGV[5])\n       else \n           redis.call('zrem', KEYS[3], ARGV[5]) \n       end\n       local maxSize = tonumber(redis.call('hget', KEYS[7], 'max-size'))\n       if maxSize ~= nil and maxSize ~= 0 then\n           local currentTime = tonumber(ARGV[1])\n           local lastAccessTimeSetName = KEYS[5]\n           local mode = redis.call('hget', KEYS[7], 'mode')\n           if mode == false or mode == 'LRU' then \n               redis.call('zadd', lastAccessTimeSetName, currentTime, ARGV[5])\n           end\n           local cacheSize = tonumber(redis.call('hlen', KEYS[1]))\n           if cacheSize >= maxSize then\n               local lruItems = redis.call('zrange', lastAccessTimeSetName, 0, cacheSize - maxSize)\n               for index, lruItem in ipairs(lruItems) do\n                   if lruItem and lruItem ~= ARGV[5] then\n                       local lruItemValue = redis.call('hget', KEYS[1], lruItem)\n                       redis.call('hdel', KEYS[1], lruItem)\n                       redis.call('zrem', KEYS[2], lruItem)\n                       redis.call('zrem', KEYS[3], lruItem)\n                       redis.call('zrem', lastAccessTimeSetName, lruItem)\n                       if lruItemValue ~= false then\n                           local removedChannelName = KEYS[6]\n                           local ttl, obj = struct.unpack('dLc0', lruItemValue)\n                           local msg = struct.pack('Lc0Lc0', string.len(lruItem), lruItem, string.len(obj), obj)\n                           redis.call('publish', removedChannelName, msg)\n                       end\n                   end\n               end\n           end\n           if mode == 'LFU' then \n               redis.call('zincrby', lastAccessTimeSetName, 1, ARGV[5]) \n           end\n       end\n       local val = struct.pack('dLc0', tonumber(ARGV[4]), string.len(ARGV[6]), ARGV[6])\n       redis.call('hset', KEYS[1], ARGV[5], val)\n       local msg = struct.pack('Lc0Lc0', string.len(ARGV[5]), ARGV[5], string.len(ARGV[6]), ARGV[6])\n       redis.call('publish', KEYS[4], msg)\n       return nil\n   ```\n\n4. **处理不可插入的情况**：\n    - 更新过期时间，并返回现有值。\n   ```lua\n   else \n       local t, val = struct.unpack('dLc0', value)\n       redis.call('zadd', KEYS[3], t + ARGV[1], ARGV[5])\n       return val\n   end\n   ```\n\n### 参数和键值解释\n\n- `KEYS[1]`: 哈希表存储缓存项。\n- `KEYS[2]`: 有序集合存储过期时间。\n- `KEYS[3]`: 有序集合存储空闲时间。\n- `KEYS[4]`: 频道名称，用于发布缓存项变更消息。\n- `KEYS[5]`: 有序集合存储最近访问时间（LRU模式）。\n- `KEYS[6]`: 频道名称，用于发布被淘汰的缓存项。\n- `KEYS[7]`: 存储缓存配置（如最大尺寸、模式等）。\n\n- `ARGV[1]`: 当前时间戳。\n- `ARGV[2]`: 新的过期时间。\n- `ARGV[3]`: 新的空闲时间。\n- `ARGV[4]`: 新缓存项的TTL。\n- `ARGV[5]`: 缓存项的键名。\n- `ARGV[6]`: 缓存项的值。","slug":"解读redis分布式锁核心逻辑","published":1,"updated":"2024-07-30T02:08:01.727Z","comments":1,"layout":"post","photos":[],"_id":"clz7s3ms8000084jd9wowci8r","content":"   <figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">local</span> insertable = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-keyword\">local</span> value = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">if</span> value == <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> insertable = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">local</span> t, val = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, value); <span class=\"hljs-keyword\">local</span> expireDate = <span class=\"hljs-number\">92233720368547758</span>; <span class=\"hljs-keyword\">local</span> expireDateScore = redis.call(<span class=\"hljs-string\">&#x27;zscore&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">if</span> expireDateScore ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> expireDate = <span class=\"hljs-built_in\">tonumber</span>(expireDateScore) <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> t ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">local</span> expireIdle = redis.call(<span class=\"hljs-string\">&#x27;zscore&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">if</span> expireIdle ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> expireDate = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">min</span>(expireDate, <span class=\"hljs-built_in\">tonumber</span>(expireIdle)) <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> expireDate &lt;= <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">then</span> insertable = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> insertable == <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">2</span>]) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">else</span> redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">3</span>]) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">else</span> redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">local</span> maxSize = <span class=\"hljs-built_in\">tonumber</span>(redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">7</span>], <span class=\"hljs-string\">&#x27;max-size&#x27;</span>)); <span class=\"hljs-keyword\">if</span> maxSize ~= <span class=\"hljs-literal\">nil</span> <span class=\"hljs-keyword\">and</span> maxSize ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>     <span class=\"hljs-keyword\">local</span> currentTime = <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">1</span>]);     <span class=\"hljs-keyword\">local</span> lastAccessTimeSetName = KEYS[<span class=\"hljs-number\">5</span>]; <span class=\"hljs-keyword\">local</span> mode = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">7</span>], <span class=\"hljs-string\">&#x27;mode&#x27;</span>); <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">or</span> mode == <span class=\"hljs-string\">&#x27;LRU&#x27;</span> <span class=\"hljs-keyword\">then</span> redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, lastAccessTimeSetName, currentTime, ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">end</span>;     <span class=\"hljs-keyword\">local</span> cacheSize = <span class=\"hljs-built_in\">tonumber</span>(redis.call(<span class=\"hljs-string\">&#x27;hlen&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>]));     <span class=\"hljs-keyword\">if</span> cacheSize &gt;= maxSize <span class=\"hljs-keyword\">then</span>         <span class=\"hljs-keyword\">local</span> lruItems = redis.call(<span class=\"hljs-string\">&#x27;zrange&#x27;</span>, lastAccessTimeSetName, <span class=\"hljs-number\">0</span>, cacheSize - maxSize);         <span class=\"hljs-keyword\">for</span> index, lruItem <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">ipairs</span>(lruItems) <span class=\"hljs-keyword\">do</span>             <span class=\"hljs-keyword\">if</span> lruItem <span class=\"hljs-keyword\">and</span> lruItem ~= ARGV[<span class=\"hljs-number\">5</span>] <span class=\"hljs-keyword\">then</span>                 <span class=\"hljs-keyword\">local</span> lruItemValue = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], lruItem);                 redis.call(<span class=\"hljs-string\">&#x27;hdel&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], lruItem);                 redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], lruItem);                 redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], lruItem);                 redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, lastAccessTimeSetName, lruItem);                 <span class=\"hljs-keyword\">if</span> lruItemValue ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span>                 <span class=\"hljs-keyword\">local</span> removedChannelName = KEYS[<span class=\"hljs-number\">6</span>]; <span class=\"hljs-keyword\">local</span> ttl, obj = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, lruItemValue);                    <span class=\"hljs-keyword\">local</span> msg = struct.pack(<span class=\"hljs-string\">&#x27;Lc0Lc0&#x27;</span>, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(lruItem), lruItem, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(obj), obj);                redis.call(<span class=\"hljs-string\">&#x27;publish&#x27;</span>, removedChannelName, msg); <span class=\"hljs-keyword\">end</span>;             <span class=\"hljs-keyword\">end</span>;         <span class=\"hljs-keyword\">end</span>;     <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-string\">&#x27;LFU&#x27;</span> <span class=\"hljs-keyword\">then</span> redis.call(<span class=\"hljs-string\">&#x27;zincrby&#x27;</span>, lastAccessTimeSetName, <span class=\"hljs-number\">1</span>, ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">local</span> val = struct.pack(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">4</span>]), <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">6</span>]), ARGV[<span class=\"hljs-number\">6</span>]); redis.call(<span class=\"hljs-string\">&#x27;hset&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>], val); <span class=\"hljs-keyword\">local</span> msg = struct.pack(<span class=\"hljs-string\">&#x27;Lc0Lc0&#x27;</span>, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">5</span>]), ARGV[<span class=\"hljs-number\">5</span>], <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">6</span>]), ARGV[<span class=\"hljs-number\">6</span>]); redis.call(<span class=\"hljs-string\">&#x27;publish&#x27;</span>, KEYS[<span class=\"hljs-number\">4</span>], msg); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">local</span> t, val = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, value); redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], t + ARGV[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">return</span> val; <span class=\"hljs-keyword\">end</span>; <br></code></pre></td></tr></table></figure>\n\n<p>这段Lua脚本用于Redis缓存的管理和插入操作，主要功能包括：</p>\n<ul>\n<li>判断是否需要插入或更新缓存。</li>\n<li>处理缓存的过期逻辑。</li>\n<li>实现基于LRU（最近最少使用）或LFU（最少使用频率）策略的缓存淘汰。</li>\n<li>在缓存项插入或更新时发布相关消息。</li>\n</ul>\n<p>具体的解读如下：</p>\n<ol>\n<li><p><strong>初始化和获取当前值</strong>：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">local</span> insertable = <span class=\"hljs-literal\">false</span><br><span class=\"hljs-keyword\">local</span> value = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>])<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>判断当前缓存项是否存在</strong>：</p>\n<ul>\n<li>如果不存在，则设置<code>insertable</code>为<code>true</code>，表示可以插入新的缓存项。</li>\n<li>如果存在，继续判断其过期时间。<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">if</span> value == <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> <br>    insertable = <span class=\"hljs-literal\">true</span> <br><span class=\"hljs-keyword\">else</span><br>    <span class=\"hljs-keyword\">local</span> t, val = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, value)<br>    <span class=\"hljs-keyword\">local</span> expireDate = <span class=\"hljs-number\">92233720368547758</span><br>    <span class=\"hljs-keyword\">local</span> expireDateScore = redis.call(<span class=\"hljs-string\">&#x27;zscore&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>    <span class=\"hljs-keyword\">if</span> expireDateScore ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> expireDate = <span class=\"hljs-built_in\">tonumber</span>(expireDateScore) <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">if</span> t ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span><br>        <span class=\"hljs-keyword\">local</span> expireIdle = redis.call(<span class=\"hljs-string\">&#x27;zscore&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>        <span class=\"hljs-keyword\">if</span> expireIdle ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> expireDate = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">min</span>(expireDate, <span class=\"hljs-built_in\">tonumber</span>(expireIdle)) <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">if</span> expireDate &lt;= <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">then</span> insertable = <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">end</span><br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>处理可插入的情况</strong>：</p>\n<ul>\n<li>更新或删除过期时间。</li>\n<li>检查缓存大小，并根据LRU或LFU策略进行淘汰。<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">if</span> insertable == <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">then</span> <br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">2</span>]) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> <br>        redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>    <span class=\"hljs-keyword\">else</span> <br>        redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>]) <br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">3</span>]) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> <br>        redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>    <span class=\"hljs-keyword\">else</span> <br>        redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>]) <br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">local</span> maxSize = <span class=\"hljs-built_in\">tonumber</span>(redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">7</span>], <span class=\"hljs-string\">&#x27;max-size&#x27;</span>))<br>    <span class=\"hljs-keyword\">if</span> maxSize ~= <span class=\"hljs-literal\">nil</span> <span class=\"hljs-keyword\">and</span> maxSize ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span><br>        <span class=\"hljs-keyword\">local</span> currentTime = <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">1</span>])<br>        <span class=\"hljs-keyword\">local</span> lastAccessTimeSetName = KEYS[<span class=\"hljs-number\">5</span>]<br>        <span class=\"hljs-keyword\">local</span> mode = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">7</span>], <span class=\"hljs-string\">&#x27;mode&#x27;</span>)<br>        <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">or</span> mode == <span class=\"hljs-string\">&#x27;LRU&#x27;</span> <span class=\"hljs-keyword\">then</span> <br>            redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, lastAccessTimeSetName, currentTime, ARGV[<span class=\"hljs-number\">5</span>])<br>        <span class=\"hljs-keyword\">end</span><br>        <span class=\"hljs-keyword\">local</span> cacheSize = <span class=\"hljs-built_in\">tonumber</span>(redis.call(<span class=\"hljs-string\">&#x27;hlen&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>]))<br>        <span class=\"hljs-keyword\">if</span> cacheSize &gt;= maxSize <span class=\"hljs-keyword\">then</span><br>            <span class=\"hljs-keyword\">local</span> lruItems = redis.call(<span class=\"hljs-string\">&#x27;zrange&#x27;</span>, lastAccessTimeSetName, <span class=\"hljs-number\">0</span>, cacheSize - maxSize)<br>            <span class=\"hljs-keyword\">for</span> index, lruItem <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">ipairs</span>(lruItems) <span class=\"hljs-keyword\">do</span><br>                <span class=\"hljs-keyword\">if</span> lruItem <span class=\"hljs-keyword\">and</span> lruItem ~= ARGV[<span class=\"hljs-number\">5</span>] <span class=\"hljs-keyword\">then</span><br>                    <span class=\"hljs-keyword\">local</span> lruItemValue = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], lruItem)<br>                    redis.call(<span class=\"hljs-string\">&#x27;hdel&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], lruItem)<br>                    redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], lruItem)<br>                    redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], lruItem)<br>                    redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, lastAccessTimeSetName, lruItem)<br>                    <span class=\"hljs-keyword\">if</span> lruItemValue ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span><br>                        <span class=\"hljs-keyword\">local</span> removedChannelName = KEYS[<span class=\"hljs-number\">6</span>]<br>                        <span class=\"hljs-keyword\">local</span> ttl, obj = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, lruItemValue)<br>                        <span class=\"hljs-keyword\">local</span> msg = struct.pack(<span class=\"hljs-string\">&#x27;Lc0Lc0&#x27;</span>, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(lruItem), lruItem, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(obj), obj)<br>                        redis.call(<span class=\"hljs-string\">&#x27;publish&#x27;</span>, removedChannelName, msg)<br>                    <span class=\"hljs-keyword\">end</span><br>                <span class=\"hljs-keyword\">end</span><br>            <span class=\"hljs-keyword\">end</span><br>        <span class=\"hljs-keyword\">end</span><br>        <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-string\">&#x27;LFU&#x27;</span> <span class=\"hljs-keyword\">then</span> <br>            redis.call(<span class=\"hljs-string\">&#x27;zincrby&#x27;</span>, lastAccessTimeSetName, <span class=\"hljs-number\">1</span>, ARGV[<span class=\"hljs-number\">5</span>]) <br>        <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">local</span> val = struct.pack(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">4</span>]), <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">6</span>]), ARGV[<span class=\"hljs-number\">6</span>])<br>    redis.call(<span class=\"hljs-string\">&#x27;hset&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>], val)<br>    <span class=\"hljs-keyword\">local</span> msg = struct.pack(<span class=\"hljs-string\">&#x27;Lc0Lc0&#x27;</span>, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">5</span>]), ARGV[<span class=\"hljs-number\">5</span>], <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">6</span>]), ARGV[<span class=\"hljs-number\">6</span>])<br>    redis.call(<span class=\"hljs-string\">&#x27;publish&#x27;</span>, KEYS[<span class=\"hljs-number\">4</span>], msg)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>处理不可插入的情况</strong>：</p>\n<ul>\n<li>更新过期时间，并返回现有值。<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">else</span> <br>    <span class=\"hljs-keyword\">local</span> t, val = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, value)<br>    redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], t + ARGV[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>    <span class=\"hljs-keyword\">return</span> val<br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"参数和键值解释\"><a href=\"#参数和键值解释\" class=\"headerlink\" title=\"参数和键值解释\"></a>参数和键值解释</h3><ul>\n<li><p><code>KEYS[1]</code>: 哈希表存储缓存项。</p>\n</li>\n<li><p><code>KEYS[2]</code>: 有序集合存储过期时间。</p>\n</li>\n<li><p><code>KEYS[3]</code>: 有序集合存储空闲时间。</p>\n</li>\n<li><p><code>KEYS[4]</code>: 频道名称，用于发布缓存项变更消息。</p>\n</li>\n<li><p><code>KEYS[5]</code>: 有序集合存储最近访问时间（LRU模式）。</p>\n</li>\n<li><p><code>KEYS[6]</code>: 频道名称，用于发布被淘汰的缓存项。</p>\n</li>\n<li><p><code>KEYS[7]</code>: 存储缓存配置（如最大尺寸、模式等）。</p>\n</li>\n<li><p><code>ARGV[1]</code>: 当前时间戳。</p>\n</li>\n<li><p><code>ARGV[2]</code>: 新的过期时间。</p>\n</li>\n<li><p><code>ARGV[3]</code>: 新的空闲时间。</p>\n</li>\n<li><p><code>ARGV[4]</code>: 新缓存项的TTL。</p>\n</li>\n<li><p><code>ARGV[5]</code>: 缓存项的键名。</p>\n</li>\n<li><p><code>ARGV[6]</code>: 缓存项的值。</p>\n</li>\n</ul>\n","excerpt":"","more":"   <figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">local</span> insertable = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-keyword\">local</span> value = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">if</span> value == <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> insertable = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">local</span> t, val = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, value); <span class=\"hljs-keyword\">local</span> expireDate = <span class=\"hljs-number\">92233720368547758</span>; <span class=\"hljs-keyword\">local</span> expireDateScore = redis.call(<span class=\"hljs-string\">&#x27;zscore&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">if</span> expireDateScore ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> expireDate = <span class=\"hljs-built_in\">tonumber</span>(expireDateScore) <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> t ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">local</span> expireIdle = redis.call(<span class=\"hljs-string\">&#x27;zscore&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">if</span> expireIdle ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> expireDate = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">min</span>(expireDate, <span class=\"hljs-built_in\">tonumber</span>(expireIdle)) <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> expireDate &lt;= <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">then</span> insertable = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> insertable == <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">2</span>]) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">else</span> redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">3</span>]) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">else</span> redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">local</span> maxSize = <span class=\"hljs-built_in\">tonumber</span>(redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">7</span>], <span class=\"hljs-string\">&#x27;max-size&#x27;</span>)); <span class=\"hljs-keyword\">if</span> maxSize ~= <span class=\"hljs-literal\">nil</span> <span class=\"hljs-keyword\">and</span> maxSize ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>     <span class=\"hljs-keyword\">local</span> currentTime = <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">1</span>]);     <span class=\"hljs-keyword\">local</span> lastAccessTimeSetName = KEYS[<span class=\"hljs-number\">5</span>]; <span class=\"hljs-keyword\">local</span> mode = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">7</span>], <span class=\"hljs-string\">&#x27;mode&#x27;</span>); <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">or</span> mode == <span class=\"hljs-string\">&#x27;LRU&#x27;</span> <span class=\"hljs-keyword\">then</span> redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, lastAccessTimeSetName, currentTime, ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">end</span>;     <span class=\"hljs-keyword\">local</span> cacheSize = <span class=\"hljs-built_in\">tonumber</span>(redis.call(<span class=\"hljs-string\">&#x27;hlen&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>]));     <span class=\"hljs-keyword\">if</span> cacheSize &gt;= maxSize <span class=\"hljs-keyword\">then</span>         <span class=\"hljs-keyword\">local</span> lruItems = redis.call(<span class=\"hljs-string\">&#x27;zrange&#x27;</span>, lastAccessTimeSetName, <span class=\"hljs-number\">0</span>, cacheSize - maxSize);         <span class=\"hljs-keyword\">for</span> index, lruItem <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">ipairs</span>(lruItems) <span class=\"hljs-keyword\">do</span>             <span class=\"hljs-keyword\">if</span> lruItem <span class=\"hljs-keyword\">and</span> lruItem ~= ARGV[<span class=\"hljs-number\">5</span>] <span class=\"hljs-keyword\">then</span>                 <span class=\"hljs-keyword\">local</span> lruItemValue = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], lruItem);                 redis.call(<span class=\"hljs-string\">&#x27;hdel&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], lruItem);                 redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], lruItem);                 redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], lruItem);                 redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, lastAccessTimeSetName, lruItem);                 <span class=\"hljs-keyword\">if</span> lruItemValue ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span>                 <span class=\"hljs-keyword\">local</span> removedChannelName = KEYS[<span class=\"hljs-number\">6</span>]; <span class=\"hljs-keyword\">local</span> ttl, obj = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, lruItemValue);                    <span class=\"hljs-keyword\">local</span> msg = struct.pack(<span class=\"hljs-string\">&#x27;Lc0Lc0&#x27;</span>, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(lruItem), lruItem, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(obj), obj);                redis.call(<span class=\"hljs-string\">&#x27;publish&#x27;</span>, removedChannelName, msg); <span class=\"hljs-keyword\">end</span>;             <span class=\"hljs-keyword\">end</span>;         <span class=\"hljs-keyword\">end</span>;     <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-string\">&#x27;LFU&#x27;</span> <span class=\"hljs-keyword\">then</span> redis.call(<span class=\"hljs-string\">&#x27;zincrby&#x27;</span>, lastAccessTimeSetName, <span class=\"hljs-number\">1</span>, ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">local</span> val = struct.pack(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">4</span>]), <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">6</span>]), ARGV[<span class=\"hljs-number\">6</span>]); redis.call(<span class=\"hljs-string\">&#x27;hset&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>], val); <span class=\"hljs-keyword\">local</span> msg = struct.pack(<span class=\"hljs-string\">&#x27;Lc0Lc0&#x27;</span>, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">5</span>]), ARGV[<span class=\"hljs-number\">5</span>], <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">6</span>]), ARGV[<span class=\"hljs-number\">6</span>]); redis.call(<span class=\"hljs-string\">&#x27;publish&#x27;</span>, KEYS[<span class=\"hljs-number\">4</span>], msg); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">local</span> t, val = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, value); redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], t + ARGV[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>]); <span class=\"hljs-keyword\">return</span> val; <span class=\"hljs-keyword\">end</span>; <br></code></pre></td></tr></table></figure>\n\n<p>这段Lua脚本用于Redis缓存的管理和插入操作，主要功能包括：</p>\n<ul>\n<li>判断是否需要插入或更新缓存。</li>\n<li>处理缓存的过期逻辑。</li>\n<li>实现基于LRU（最近最少使用）或LFU（最少使用频率）策略的缓存淘汰。</li>\n<li>在缓存项插入或更新时发布相关消息。</li>\n</ul>\n<p>具体的解读如下：</p>\n<ol>\n<li><p><strong>初始化和获取当前值</strong>：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">local</span> insertable = <span class=\"hljs-literal\">false</span><br><span class=\"hljs-keyword\">local</span> value = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>])<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>判断当前缓存项是否存在</strong>：</p>\n<ul>\n<li>如果不存在，则设置<code>insertable</code>为<code>true</code>，表示可以插入新的缓存项。</li>\n<li>如果存在，继续判断其过期时间。<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">if</span> value == <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> <br>    insertable = <span class=\"hljs-literal\">true</span> <br><span class=\"hljs-keyword\">else</span><br>    <span class=\"hljs-keyword\">local</span> t, val = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, value)<br>    <span class=\"hljs-keyword\">local</span> expireDate = <span class=\"hljs-number\">92233720368547758</span><br>    <span class=\"hljs-keyword\">local</span> expireDateScore = redis.call(<span class=\"hljs-string\">&#x27;zscore&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>    <span class=\"hljs-keyword\">if</span> expireDateScore ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> expireDate = <span class=\"hljs-built_in\">tonumber</span>(expireDateScore) <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">if</span> t ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span><br>        <span class=\"hljs-keyword\">local</span> expireIdle = redis.call(<span class=\"hljs-string\">&#x27;zscore&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>        <span class=\"hljs-keyword\">if</span> expireIdle ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span> expireDate = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">min</span>(expireDate, <span class=\"hljs-built_in\">tonumber</span>(expireIdle)) <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">if</span> expireDate &lt;= <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">then</span> insertable = <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">end</span><br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>处理可插入的情况</strong>：</p>\n<ul>\n<li>更新或删除过期时间。</li>\n<li>检查缓存大小，并根据LRU或LFU策略进行淘汰。<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">if</span> insertable == <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">then</span> <br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">2</span>]) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> <br>        redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>    <span class=\"hljs-keyword\">else</span> <br>        redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], ARGV[<span class=\"hljs-number\">5</span>]) <br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">3</span>]) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> <br>        redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>    <span class=\"hljs-keyword\">else</span> <br>        redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], ARGV[<span class=\"hljs-number\">5</span>]) <br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">local</span> maxSize = <span class=\"hljs-built_in\">tonumber</span>(redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">7</span>], <span class=\"hljs-string\">&#x27;max-size&#x27;</span>))<br>    <span class=\"hljs-keyword\">if</span> maxSize ~= <span class=\"hljs-literal\">nil</span> <span class=\"hljs-keyword\">and</span> maxSize ~= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span><br>        <span class=\"hljs-keyword\">local</span> currentTime = <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">1</span>])<br>        <span class=\"hljs-keyword\">local</span> lastAccessTimeSetName = KEYS[<span class=\"hljs-number\">5</span>]<br>        <span class=\"hljs-keyword\">local</span> mode = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">7</span>], <span class=\"hljs-string\">&#x27;mode&#x27;</span>)<br>        <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">or</span> mode == <span class=\"hljs-string\">&#x27;LRU&#x27;</span> <span class=\"hljs-keyword\">then</span> <br>            redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, lastAccessTimeSetName, currentTime, ARGV[<span class=\"hljs-number\">5</span>])<br>        <span class=\"hljs-keyword\">end</span><br>        <span class=\"hljs-keyword\">local</span> cacheSize = <span class=\"hljs-built_in\">tonumber</span>(redis.call(<span class=\"hljs-string\">&#x27;hlen&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>]))<br>        <span class=\"hljs-keyword\">if</span> cacheSize &gt;= maxSize <span class=\"hljs-keyword\">then</span><br>            <span class=\"hljs-keyword\">local</span> lruItems = redis.call(<span class=\"hljs-string\">&#x27;zrange&#x27;</span>, lastAccessTimeSetName, <span class=\"hljs-number\">0</span>, cacheSize - maxSize)<br>            <span class=\"hljs-keyword\">for</span> index, lruItem <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">ipairs</span>(lruItems) <span class=\"hljs-keyword\">do</span><br>                <span class=\"hljs-keyword\">if</span> lruItem <span class=\"hljs-keyword\">and</span> lruItem ~= ARGV[<span class=\"hljs-number\">5</span>] <span class=\"hljs-keyword\">then</span><br>                    <span class=\"hljs-keyword\">local</span> lruItemValue = redis.call(<span class=\"hljs-string\">&#x27;hget&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], lruItem)<br>                    redis.call(<span class=\"hljs-string\">&#x27;hdel&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], lruItem)<br>                    redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">2</span>], lruItem)<br>                    redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], lruItem)<br>                    redis.call(<span class=\"hljs-string\">&#x27;zrem&#x27;</span>, lastAccessTimeSetName, lruItem)<br>                    <span class=\"hljs-keyword\">if</span> lruItemValue ~= <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">then</span><br>                        <span class=\"hljs-keyword\">local</span> removedChannelName = KEYS[<span class=\"hljs-number\">6</span>]<br>                        <span class=\"hljs-keyword\">local</span> ttl, obj = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, lruItemValue)<br>                        <span class=\"hljs-keyword\">local</span> msg = struct.pack(<span class=\"hljs-string\">&#x27;Lc0Lc0&#x27;</span>, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(lruItem), lruItem, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(obj), obj)<br>                        redis.call(<span class=\"hljs-string\">&#x27;publish&#x27;</span>, removedChannelName, msg)<br>                    <span class=\"hljs-keyword\">end</span><br>                <span class=\"hljs-keyword\">end</span><br>            <span class=\"hljs-keyword\">end</span><br>        <span class=\"hljs-keyword\">end</span><br>        <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-string\">&#x27;LFU&#x27;</span> <span class=\"hljs-keyword\">then</span> <br>            redis.call(<span class=\"hljs-string\">&#x27;zincrby&#x27;</span>, lastAccessTimeSetName, <span class=\"hljs-number\">1</span>, ARGV[<span class=\"hljs-number\">5</span>]) <br>        <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-keyword\">local</span> val = struct.pack(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, <span class=\"hljs-built_in\">tonumber</span>(ARGV[<span class=\"hljs-number\">4</span>]), <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">6</span>]), ARGV[<span class=\"hljs-number\">6</span>])<br>    redis.call(<span class=\"hljs-string\">&#x27;hset&#x27;</span>, KEYS[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>], val)<br>    <span class=\"hljs-keyword\">local</span> msg = struct.pack(<span class=\"hljs-string\">&#x27;Lc0Lc0&#x27;</span>, <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">5</span>]), ARGV[<span class=\"hljs-number\">5</span>], <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-built_in\">len</span>(ARGV[<span class=\"hljs-number\">6</span>]), ARGV[<span class=\"hljs-number\">6</span>])<br>    redis.call(<span class=\"hljs-string\">&#x27;publish&#x27;</span>, KEYS[<span class=\"hljs-number\">4</span>], msg)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>处理不可插入的情况</strong>：</p>\n<ul>\n<li>更新过期时间，并返回现有值。<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\"><span class=\"hljs-keyword\">else</span> <br>    <span class=\"hljs-keyword\">local</span> t, val = struct.<span class=\"hljs-built_in\">unpack</span>(<span class=\"hljs-string\">&#x27;dLc0&#x27;</span>, value)<br>    redis.call(<span class=\"hljs-string\">&#x27;zadd&#x27;</span>, KEYS[<span class=\"hljs-number\">3</span>], t + ARGV[<span class=\"hljs-number\">1</span>], ARGV[<span class=\"hljs-number\">5</span>])<br>    <span class=\"hljs-keyword\">return</span> val<br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"参数和键值解释\"><a href=\"#参数和键值解释\" class=\"headerlink\" title=\"参数和键值解释\"></a>参数和键值解释</h3><ul>\n<li><p><code>KEYS[1]</code>: 哈希表存储缓存项。</p>\n</li>\n<li><p><code>KEYS[2]</code>: 有序集合存储过期时间。</p>\n</li>\n<li><p><code>KEYS[3]</code>: 有序集合存储空闲时间。</p>\n</li>\n<li><p><code>KEYS[4]</code>: 频道名称，用于发布缓存项变更消息。</p>\n</li>\n<li><p><code>KEYS[5]</code>: 有序集合存储最近访问时间（LRU模式）。</p>\n</li>\n<li><p><code>KEYS[6]</code>: 频道名称，用于发布被淘汰的缓存项。</p>\n</li>\n<li><p><code>KEYS[7]</code>: 存储缓存配置（如最大尺寸、模式等）。</p>\n</li>\n<li><p><code>ARGV[1]</code>: 当前时间戳。</p>\n</li>\n<li><p><code>ARGV[2]</code>: 新的过期时间。</p>\n</li>\n<li><p><code>ARGV[3]</code>: 新的空闲时间。</p>\n</li>\n<li><p><code>ARGV[4]</code>: 新缓存项的TTL。</p>\n</li>\n<li><p><code>ARGV[5]</code>: 缓存项的键名。</p>\n</li>\n<li><p><code>ARGV[6]</code>: 缓存项的值。</p>\n</li>\n</ul>\n"},{"title":"对linux磁盘进行无损扩容","date":"2024-08-05T12:37:35.000Z","_content":"\n执行 lsblk 命令得到的数据如下\n   ```bash\nNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS\nsda      8:0    0  150G  0 disk \n├─sda1   8:1    0   49G  0 part /\n├─sda2   8:2    0    1K  0 part \n└─sda5   8:5    0  975M  0 part [SWAP]\nsr0     11:0    1  4.6G  0 rom  \n   ```\n此时，想将sda1从49G扩容到150G。进行无损扩展 `/dev/sda1` 的步骤较为复杂，但可以通过以下步骤来安全地扩展分区而不丢失数据。这包括使用 `fdisk` 或 `parted` 工具来调整分区大小，然后扩展文件系统。\n\n### 无损扩展分区的步骤\n\n#### 1. **备份数据**\n\n在进行任何磁盘操作之前，务必备份重要数据以防万一。\n\n#### 2. **使用 `parted` 调整分区大小**\n\n假设现有的 `/dev/sda1` 是 `ext4` 文件系统。\n\n1. **查看当前磁盘布局**\n\n   ```bash\n   lsblk\n   sudo fdisk -l /dev/sda\n   ```\n\n2. **调整分区大小**\n\n   使用 `parted` 调整分区大小。\n\n   ```bash\n   sudo parted /dev/sda\n   ```\n\n   在 `parted` 交互界面中执行以下步骤：\n\n   ```bash\n   (parted) print\n   ```\n\n   确认分区表，并记下 `/dev/sda1` 的起始位置（例如 `2048s`）。\n\n   ```bash\n   (parted) resizepart 1 150GB\n   ```\n\n   这会扩展分区1到150GB。\n\n   ```bash\n   (parted) quit\n   ```\n\n#### 3. **更新分区表**\n\n有时，系统需要重新加载分区表。\n\n```bash\nsudo partprobe /dev/sda\n```\n\n#### 4. **扩展文件系统**\n\n根据你的文件系统类型，执行以下步骤来扩展文件系统。\n\n##### 对于 `ext4` 文件系统：\n\n```bash\nsudo resize2fs /dev/sda1\n```\n\n##### 对于 `xfs` 文件系统：\n\n```bash\nsudo xfs_growfs /dev/sda1\n```\n\n#### 5. **验证扩展是否成功**\n\n```bash\ndf -h\n```\n\n### 示例步骤\n\n完整的命令和步骤如下：\n\n```bash\n# 查看当前磁盘布局\nlsblk\nsudo fdisk -l /dev/sda\n\n# 调整分区大小\nsudo parted /dev/sda\n\n# 在 parted 交互界面中\n(parted) print\n(parted) resizepart 1 150GB\n(parted) quit\n\n# 更新分区表\nsudo partprobe /dev/sda\n\n# 扩展文件系统（假设是 ext4 文件系统）\nsudo resize2fs /dev/sda1\n\n# 验证扩展是否成功\ndf -h\n```\n\n### 注意事项\n\n- 确保你的 `/dev/sda1` 分区后面有足够的未分配空间来扩展到 150GB。\n- 在操作之前，确保系统分区未被使用或者在单用户模式下进行操作，以防止数据损坏。\n- 如果你无法进入系统，可以通过 live CD/USB 启动系统并执行这些操作。\n\n这些步骤旨在提供一种相对安全的方法来无损扩展分区。如果对操作不熟悉，建议请教专业人士或使用专业的分区管理软件进行操作。","source":"_posts/对linux磁盘进行无损扩容.md","raw":"---\ntitle: 对linux磁盘进行无损扩容\ndate: 2024-08-05 20:37:35\ntags:\n---\n\n执行 lsblk 命令得到的数据如下\n   ```bash\nNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS\nsda      8:0    0  150G  0 disk \n├─sda1   8:1    0   49G  0 part /\n├─sda2   8:2    0    1K  0 part \n└─sda5   8:5    0  975M  0 part [SWAP]\nsr0     11:0    1  4.6G  0 rom  \n   ```\n此时，想将sda1从49G扩容到150G。进行无损扩展 `/dev/sda1` 的步骤较为复杂，但可以通过以下步骤来安全地扩展分区而不丢失数据。这包括使用 `fdisk` 或 `parted` 工具来调整分区大小，然后扩展文件系统。\n\n### 无损扩展分区的步骤\n\n#### 1. **备份数据**\n\n在进行任何磁盘操作之前，务必备份重要数据以防万一。\n\n#### 2. **使用 `parted` 调整分区大小**\n\n假设现有的 `/dev/sda1` 是 `ext4` 文件系统。\n\n1. **查看当前磁盘布局**\n\n   ```bash\n   lsblk\n   sudo fdisk -l /dev/sda\n   ```\n\n2. **调整分区大小**\n\n   使用 `parted` 调整分区大小。\n\n   ```bash\n   sudo parted /dev/sda\n   ```\n\n   在 `parted` 交互界面中执行以下步骤：\n\n   ```bash\n   (parted) print\n   ```\n\n   确认分区表，并记下 `/dev/sda1` 的起始位置（例如 `2048s`）。\n\n   ```bash\n   (parted) resizepart 1 150GB\n   ```\n\n   这会扩展分区1到150GB。\n\n   ```bash\n   (parted) quit\n   ```\n\n#### 3. **更新分区表**\n\n有时，系统需要重新加载分区表。\n\n```bash\nsudo partprobe /dev/sda\n```\n\n#### 4. **扩展文件系统**\n\n根据你的文件系统类型，执行以下步骤来扩展文件系统。\n\n##### 对于 `ext4` 文件系统：\n\n```bash\nsudo resize2fs /dev/sda1\n```\n\n##### 对于 `xfs` 文件系统：\n\n```bash\nsudo xfs_growfs /dev/sda1\n```\n\n#### 5. **验证扩展是否成功**\n\n```bash\ndf -h\n```\n\n### 示例步骤\n\n完整的命令和步骤如下：\n\n```bash\n# 查看当前磁盘布局\nlsblk\nsudo fdisk -l /dev/sda\n\n# 调整分区大小\nsudo parted /dev/sda\n\n# 在 parted 交互界面中\n(parted) print\n(parted) resizepart 1 150GB\n(parted) quit\n\n# 更新分区表\nsudo partprobe /dev/sda\n\n# 扩展文件系统（假设是 ext4 文件系统）\nsudo resize2fs /dev/sda1\n\n# 验证扩展是否成功\ndf -h\n```\n\n### 注意事项\n\n- 确保你的 `/dev/sda1` 分区后面有足够的未分配空间来扩展到 150GB。\n- 在操作之前，确保系统分区未被使用或者在单用户模式下进行操作，以防止数据损坏。\n- 如果你无法进入系统，可以通过 live CD/USB 启动系统并执行这些操作。\n\n这些步骤旨在提供一种相对安全的方法来无损扩展分区。如果对操作不熟悉，建议请教专业人士或使用专业的分区管理软件进行操作。","slug":"对linux磁盘进行无损扩容","published":1,"updated":"2024-08-05T12:38:47.777Z","comments":1,"layout":"post","photos":[],"_id":"clzgz9w450000bgjd1zto5som","content":"<p>执行 lsblk 命令得到的数据如下<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>sda      8:0    0  150G  0 disk <br>├─sda1   8:1    0   49G  0 part /<br>├─sda2   8:2    0    1K  0 part <br>└─sda5   8:5    0  975M  0 part [SWAP]<br>sr0     11:0    1  4.6G  0 rom  <br></code></pre></td></tr></table></figure><br>此时，想将sda1从49G扩容到150G。进行无损扩展 <code>/dev/sda1</code> 的步骤较为复杂，但可以通过以下步骤来安全地扩展分区而不丢失数据。这包括使用 <code>fdisk</code> 或 <code>parted</code> 工具来调整分区大小，然后扩展文件系统。</p>\n<h3 id=\"无损扩展分区的步骤\"><a href=\"#无损扩展分区的步骤\" class=\"headerlink\" title=\"无损扩展分区的步骤\"></a>无损扩展分区的步骤</h3><h4 id=\"1-备份数据\"><a href=\"#1-备份数据\" class=\"headerlink\" title=\"1. 备份数据\"></a>1. <strong>备份数据</strong></h4><p>在进行任何磁盘操作之前，务必备份重要数据以防万一。</p>\n<h4 id=\"2-使用-parted-调整分区大小\"><a href=\"#2-使用-parted-调整分区大小\" class=\"headerlink\" title=\"2. 使用 parted 调整分区大小\"></a>2. <strong>使用 <code>parted</code> 调整分区大小</strong></h4><p>假设现有的 <code>/dev/sda1</code> 是 <code>ext4</code> 文件系统。</p>\n<ol>\n<li><p><strong>查看当前磁盘布局</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">lsblk<br>sudo fdisk -l /dev/sda<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>调整分区大小</strong></p>\n<p>使用 <code>parted</code> 调整分区大小。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo parted /dev/sda<br></code></pre></td></tr></table></figure>\n\n<p>在 <code>parted</code> 交互界面中执行以下步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">(parted) <span class=\"hljs-built_in\">print</span><br></code></pre></td></tr></table></figure>\n\n<p>确认分区表，并记下 <code>/dev/sda1</code> 的起始位置（例如 <code>2048s</code>）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">(parted) resizepart 1 150GB<br></code></pre></td></tr></table></figure>\n\n<p>这会扩展分区1到150GB。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">(parted) quit<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"3-更新分区表\"><a href=\"#3-更新分区表\" class=\"headerlink\" title=\"3. 更新分区表\"></a>3. <strong>更新分区表</strong></h4><p>有时，系统需要重新加载分区表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo partprobe /dev/sda<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-扩展文件系统\"><a href=\"#4-扩展文件系统\" class=\"headerlink\" title=\"4. 扩展文件系统\"></a>4. <strong>扩展文件系统</strong></h4><p>根据你的文件系统类型，执行以下步骤来扩展文件系统。</p>\n<h5 id=\"对于-ext4-文件系统：\"><a href=\"#对于-ext4-文件系统：\" class=\"headerlink\" title=\"对于 ext4 文件系统：\"></a>对于 <code>ext4</code> 文件系统：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo resize2fs /dev/sda1<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"对于-xfs-文件系统：\"><a href=\"#对于-xfs-文件系统：\" class=\"headerlink\" title=\"对于 xfs 文件系统：\"></a>对于 <code>xfs</code> 文件系统：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo xfs_growfs /dev/sda1<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-验证扩展是否成功\"><a href=\"#5-验证扩展是否成功\" class=\"headerlink\" title=\"5. 验证扩展是否成功\"></a>5. <strong>验证扩展是否成功</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">df</span> -h<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"示例步骤\"><a href=\"#示例步骤\" class=\"headerlink\" title=\"示例步骤\"></a>示例步骤</h3><p>完整的命令和步骤如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 查看当前磁盘布局</span><br>lsblk<br>sudo fdisk -l /dev/sda<br><br><span class=\"hljs-comment\"># 调整分区大小</span><br>sudo parted /dev/sda<br><br><span class=\"hljs-comment\"># 在 parted 交互界面中</span><br>(parted) <span class=\"hljs-built_in\">print</span><br>(parted) resizepart 1 150GB<br>(parted) quit<br><br><span class=\"hljs-comment\"># 更新分区表</span><br>sudo partprobe /dev/sda<br><br><span class=\"hljs-comment\"># 扩展文件系统（假设是 ext4 文件系统）</span><br>sudo resize2fs /dev/sda1<br><br><span class=\"hljs-comment\"># 验证扩展是否成功</span><br><span class=\"hljs-built_in\">df</span> -h<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>确保你的 <code>/dev/sda1</code> 分区后面有足够的未分配空间来扩展到 150GB。</li>\n<li>在操作之前，确保系统分区未被使用或者在单用户模式下进行操作，以防止数据损坏。</li>\n<li>如果你无法进入系统，可以通过 live CD&#x2F;USB 启动系统并执行这些操作。</li>\n</ul>\n<p>这些步骤旨在提供一种相对安全的方法来无损扩展分区。如果对操作不熟悉，建议请教专业人士或使用专业的分区管理软件进行操作。</p>\n","excerpt":"","more":"<p>执行 lsblk 命令得到的数据如下<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>sda      8:0    0  150G  0 disk <br>├─sda1   8:1    0   49G  0 part /<br>├─sda2   8:2    0    1K  0 part <br>└─sda5   8:5    0  975M  0 part [SWAP]<br>sr0     11:0    1  4.6G  0 rom  <br></code></pre></td></tr></table></figure><br>此时，想将sda1从49G扩容到150G。进行无损扩展 <code>/dev/sda1</code> 的步骤较为复杂，但可以通过以下步骤来安全地扩展分区而不丢失数据。这包括使用 <code>fdisk</code> 或 <code>parted</code> 工具来调整分区大小，然后扩展文件系统。</p>\n<h3 id=\"无损扩展分区的步骤\"><a href=\"#无损扩展分区的步骤\" class=\"headerlink\" title=\"无损扩展分区的步骤\"></a>无损扩展分区的步骤</h3><h4 id=\"1-备份数据\"><a href=\"#1-备份数据\" class=\"headerlink\" title=\"1. 备份数据\"></a>1. <strong>备份数据</strong></h4><p>在进行任何磁盘操作之前，务必备份重要数据以防万一。</p>\n<h4 id=\"2-使用-parted-调整分区大小\"><a href=\"#2-使用-parted-调整分区大小\" class=\"headerlink\" title=\"2. 使用 parted 调整分区大小\"></a>2. <strong>使用 <code>parted</code> 调整分区大小</strong></h4><p>假设现有的 <code>/dev/sda1</code> 是 <code>ext4</code> 文件系统。</p>\n<ol>\n<li><p><strong>查看当前磁盘布局</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">lsblk<br>sudo fdisk -l /dev/sda<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>调整分区大小</strong></p>\n<p>使用 <code>parted</code> 调整分区大小。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo parted /dev/sda<br></code></pre></td></tr></table></figure>\n\n<p>在 <code>parted</code> 交互界面中执行以下步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">(parted) <span class=\"hljs-built_in\">print</span><br></code></pre></td></tr></table></figure>\n\n<p>确认分区表，并记下 <code>/dev/sda1</code> 的起始位置（例如 <code>2048s</code>）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">(parted) resizepart 1 150GB<br></code></pre></td></tr></table></figure>\n\n<p>这会扩展分区1到150GB。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">(parted) quit<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"3-更新分区表\"><a href=\"#3-更新分区表\" class=\"headerlink\" title=\"3. 更新分区表\"></a>3. <strong>更新分区表</strong></h4><p>有时，系统需要重新加载分区表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo partprobe /dev/sda<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-扩展文件系统\"><a href=\"#4-扩展文件系统\" class=\"headerlink\" title=\"4. 扩展文件系统\"></a>4. <strong>扩展文件系统</strong></h4><p>根据你的文件系统类型，执行以下步骤来扩展文件系统。</p>\n<h5 id=\"对于-ext4-文件系统：\"><a href=\"#对于-ext4-文件系统：\" class=\"headerlink\" title=\"对于 ext4 文件系统：\"></a>对于 <code>ext4</code> 文件系统：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo resize2fs /dev/sda1<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"对于-xfs-文件系统：\"><a href=\"#对于-xfs-文件系统：\" class=\"headerlink\" title=\"对于 xfs 文件系统：\"></a>对于 <code>xfs</code> 文件系统：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo xfs_growfs /dev/sda1<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-验证扩展是否成功\"><a href=\"#5-验证扩展是否成功\" class=\"headerlink\" title=\"5. 验证扩展是否成功\"></a>5. <strong>验证扩展是否成功</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">df</span> -h<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"示例步骤\"><a href=\"#示例步骤\" class=\"headerlink\" title=\"示例步骤\"></a>示例步骤</h3><p>完整的命令和步骤如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 查看当前磁盘布局</span><br>lsblk<br>sudo fdisk -l /dev/sda<br><br><span class=\"hljs-comment\"># 调整分区大小</span><br>sudo parted /dev/sda<br><br><span class=\"hljs-comment\"># 在 parted 交互界面中</span><br>(parted) <span class=\"hljs-built_in\">print</span><br>(parted) resizepart 1 150GB<br>(parted) quit<br><br><span class=\"hljs-comment\"># 更新分区表</span><br>sudo partprobe /dev/sda<br><br><span class=\"hljs-comment\"># 扩展文件系统（假设是 ext4 文件系统）</span><br>sudo resize2fs /dev/sda1<br><br><span class=\"hljs-comment\"># 验证扩展是否成功</span><br><span class=\"hljs-built_in\">df</span> -h<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>确保你的 <code>/dev/sda1</code> 分区后面有足够的未分配空间来扩展到 150GB。</li>\n<li>在操作之前，确保系统分区未被使用或者在单用户模式下进行操作，以防止数据损坏。</li>\n<li>如果你无法进入系统，可以通过 live CD&#x2F;USB 启动系统并执行这些操作。</li>\n</ul>\n<p>这些步骤旨在提供一种相对安全的方法来无损扩展分区。如果对操作不熟悉，建议请教专业人士或使用专业的分区管理软件进行操作。</p>\n"}],"PostAsset":[{"_id":"source\\_posts\\学习it网站推荐\\image_-m-m1AZh7M.png","slug":"image_-m-m1AZh7M.png","post":"clxwwokx900017wjd3y3c9xhh","modified":0,"renderable":0},{"_id":"source\\_posts\\学习it网站推荐\\image_bUw4GOE3i3.png","slug":"image_bUw4GOE3i3.png","post":"clxwwokx900017wjd3y3c9xhh","modified":0,"renderable":0},{"_id":"source\\_posts\\学习it网站推荐\\image_PEAqPgamQe.png","slug":"image_PEAqPgamQe.png","post":"clxwwokx900017wjd3y3c9xhh","modified":0,"renderable":0},{"_id":"source\\_posts\\学习it网站推荐\\image_qBL4LWSs2U.png","slug":"image_qBL4LWSs2U.png","post":"clxwwokx900017wjd3y3c9xhh","modified":0,"renderable":0},{"_id":"source\\_posts\\学习it网站推荐\\image_RtiUPlWbme.png","slug":"image_RtiUPlWbme.png","post":"clxwwokx900017wjd3y3c9xhh","modified":0,"renderable":0},{"_id":"source\\_posts\\学习it网站推荐\\image_SOZXE0ImbY.png","slug":"image_SOZXE0ImbY.png","post":"clxwwokx900017wjd3y3c9xhh","modified":0,"renderable":0},{"_id":"source\\_posts\\学习it网站推荐\\image_tMLd_Cap6a.png","slug":"image_tMLd_Cap6a.png","post":"clxwwokx900017wjd3y3c9xhh","modified":0,"renderable":0},{"_id":"source\\_posts\\学习it网站推荐\\image_zZOb0Uu1MN.png","slug":"image_zZOb0Uu1MN.png","post":"clxwwokx900017wjd3y3c9xhh","modified":0,"renderable":0},{"_id":"source\\_posts\\在linux上使用代理\\mihomo-linux-amd64-v1.18.6.deb","slug":"mihomo-linux-amd64-v1.18.6.deb","post":"clz226zqt0000mcjdddb70zak","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}